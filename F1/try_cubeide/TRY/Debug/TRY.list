
TRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d44  08007d44  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d4c  08007d4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000f08  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f18  20000f18  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b5b2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a23  00000000  00000000  0003b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0003f018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001618  00000000  00000000  00040790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235e6  00000000  00000000  00041da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2f3  00000000  00000000  0006538e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6da9  00000000  00000000  00081681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015842a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062d0  00000000  00000000  0015847c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cf4 	.word	0x08007cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007cf4 	.word	0x08007cf4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_DMA_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2105      	movs	r1, #5
 80004fa:	203a      	movs	r0, #58	; 0x3a
 80004fc:	f000 fd97 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000500:	203a      	movs	r0, #58	; 0x3a
 8000502:	f000 fdb0 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2105      	movs	r1, #5
 800050a:	2046      	movs	r0, #70	; 0x46
 800050c:	f000 fd8f 	bl	800102e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000510:	2046      	movs	r0, #70	; 0x46
 8000512:	f000 fda8 	bl	8001066 <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  */

/**
  * @}
  */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
 800054e:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <MX_GPIO_Init+0xb4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a25      	ldr	r2, [pc, #148]	; (80005e8 <MX_GPIO_Init+0xb4>)
 8000554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_GPIO_Init+0xb4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <MX_GPIO_Init+0xb4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <MX_GPIO_Init+0xb4>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <MX_GPIO_Init+0xb4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_GPIO_Init+0xb4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <MX_GPIO_Init+0xb4>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_GPIO_Init+0xb4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_GPIO_Init+0xb4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <MX_GPIO_Init+0xb4>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_GPIO_Init+0xb4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <MX_GPIO_Init+0xb8>)
 80005c0:	f001 fa92 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	2300      	movs	r3, #0
 80005d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4619      	mov	r1, r3
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <MX_GPIO_Init+0xb8>)
 80005dc:	f001 f8e8 	bl	80017b0 <HAL_GPIO_Init>

}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	; 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020c00 	.word	0x40020c00

080005f0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C3_Init+0x50>)
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <MX_I2C3_Init+0x54>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C3_Init+0x50>)
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <MX_I2C3_Init+0x58>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C3_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_I2C3_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_I2C3_Init+0x50>)
 800060e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000612:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_I2C3_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_I2C3_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_I2C3_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_I2C3_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_I2C3_Init+0x50>)
 800062e:	f001 fa8f 	bl	8001b50 <HAL_I2C_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000638:	f000 f90e 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000002c 	.word	0x2000002c
 8000644:	40005c00 	.word	0x40005c00
 8000648:	000186a0 	.word	0x000186a0

0800064c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a31      	ldr	r2, [pc, #196]	; (8000730 <HAL_I2C_MspInit+0xe4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d15b      	bne.n	8000726 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a28      	ldr	r2, [pc, #160]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ac:	2312      	movs	r3, #18
 80006ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80006b8:	2304      	movs	r3, #4
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	4619      	mov	r1, r3
 80006c2:	481d      	ldr	r0, [pc, #116]	; (8000738 <HAL_I2C_MspInit+0xec>)
 80006c4:	f001 f874 	bl	80017b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ce:	2312      	movs	r3, #18
 80006d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80006da:	2304      	movs	r3, #4
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4815      	ldr	r0, [pc, #84]	; (800073c <HAL_I2C_MspInit+0xf0>)
 80006e6:	f001 f863 	bl	80017b0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 80006f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006f8:	6413      	str	r3, [r2, #64]	; 0x40
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <HAL_I2C_MspInit+0xe8>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2105      	movs	r1, #5
 800070a:	2048      	movs	r0, #72	; 0x48
 800070c:	f000 fc8f 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000710:	2048      	movs	r0, #72	; 0x48
 8000712:	f000 fca8 	bl	8001066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2105      	movs	r1, #5
 800071a:	2049      	movs	r0, #73	; 0x49
 800071c:	f000 fc87 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000720:	2049      	movs	r0, #73	; 0x49
 8000722:	f000 fca0 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40005c00 	.word	0x40005c00
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fb02 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f81c 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f7ff fef2 	bl	8000534 <MX_GPIO_Init>
  MX_DMA_Init();
 8000750:	f7ff fec0 	bl	80004d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000754:	f000 f9f0 	bl	8000b38 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8000758:	f7ff ff4a 	bl	80005f0 <MX_I2C3_Init>
  MX_TIM5_Init();
 800075c:	f000 f916 	bl	800098c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000760:	f004 ff94 	bl	800568c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000764:	f7ff fede 	bl	8000524 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000768:	f004 ffb4 	bl	80056d4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_7);
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <main+0x40>)
 8000770:	f001 f9d3 	bl	8001b1a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000778:	f000 fb5a 	bl	8000e30 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_7);
 800077c:	e7f6      	b.n	800076c <main+0x2c>
 800077e:	bf00      	nop
 8000780:	40020c00 	.word	0x40020c00

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	; 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	; 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f007 faa6 	bl	8007ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	4a27      	ldr	r2, [pc, #156]	; (8000850 <SystemClock_Config+0xcc>)
 80007b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b6:	6413      	str	r3, [r2, #64]	; 0x40
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a21      	ldr	r2, [pc, #132]	; (8000854 <SystemClock_Config+0xd0>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6013      	str	r3, [r2, #0]
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e0:	2302      	movs	r3, #2
 80007e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e8:	2310      	movs	r3, #16
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2300      	movs	r3, #0
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007f4:	2308      	movs	r3, #8
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007f8:	23a8      	movs	r3, #168	; 0xa8
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4618      	mov	r0, r3
 800080a:	f002 ffc1 	bl	8003790 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000814:	f000 f820 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000824:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2105      	movs	r1, #5
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fa22 	bl	8003c80 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000842:	f000 f809 	bl	8000858 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	; 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x54>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <HAL_MspInit+0x54>)
 8000874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x54>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <HAL_MspInit+0x54>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_MspInit+0x54>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6413      	str	r3, [r2, #64]	; 0x40
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_MspInit+0x54>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	210f      	movs	r1, #15
 80008a6:	f06f 0001 	mvn.w	r0, #1
 80008aa:	f000 fbc0 	bl	800102e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ec:	f000 fa80 	bl	8000df0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008f0:	f006 fa8e 	bl	8006e10 <xTaskGetSchedulerState>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d001      	beq.n	80008fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008fa:	f007 f875 	bl	80079e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <USART1_IRQHandler+0x10>)
 800090a:	f003 ffc5 	bl	8004898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000c8 	.word	0x200000c8

08000918 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <DMA2_Stream2_IRQHandler+0x10>)
 800091e:	f000 fcfd 	bl	800131c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000010c 	.word	0x2000010c

0800092c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <DMA2_Stream7_IRQHandler+0x10>)
 8000932:	f000 fcf3 	bl	800131c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000016c 	.word	0x2000016c

08000940 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <I2C3_EV_IRQHandler+0x10>)
 8000946:	f001 fa47 	bl	8001dd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000002c 	.word	0x2000002c

08000954 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <I2C3_ER_IRQHandler+0x10>)
 800095a:	f001 fbae 	bl	80020ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000002c 	.word	0x2000002c

08000968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
 80009aa:	615a      	str	r2, [r3, #20]
 80009ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009ae:	4b32      	ldr	r3, [pc, #200]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009b0:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <MX_TIM5_Init+0xf0>)
 80009b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009b4:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ba:	4b2f      	ldr	r3, [pc, #188]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009c2:	f04f 32ff 	mov.w	r2, #4294967295
 80009c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b2b      	ldr	r3, [pc, #172]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009d6:	f003 fb33 	bl	8004040 <HAL_TIM_PWM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80009e0:	f7ff ff3a 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009ec:	f107 0320 	add.w	r3, r7, #32
 80009f0:	4619      	mov	r1, r3
 80009f2:	4821      	ldr	r0, [pc, #132]	; (8000a78 <MX_TIM5_Init+0xec>)
 80009f4:	f003 fe86 	bl	8004704 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80009fe:	f7ff ff2b 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	; 0x60
 8000a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	4619      	mov	r1, r3
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <MX_TIM5_Init+0xec>)
 8000a1a:	f003 fb61 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000a24:	f7ff ff18 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4812      	ldr	r0, [pc, #72]	; (8000a78 <MX_TIM5_Init+0xec>)
 8000a30:	f003 fb56 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000a3a:	f7ff ff0d 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2208      	movs	r2, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_TIM5_Init+0xec>)
 8000a46:	f003 fb4b 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000a50:	f7ff ff02 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	220c      	movs	r2, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MX_TIM5_Init+0xec>)
 8000a5c:	f003 fb40 	bl	80040e0 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000a66:	f7ff fef7 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a6a:	4803      	ldr	r0, [pc, #12]	; (8000a78 <MX_TIM5_Init+0xec>)
 8000a6c:	f000 f82a 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000080 	.word	0x20000080
 8000a7c:	40000c00 	.word	0x40000c00

08000a80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_TIM_PWM_MspInit+0x3c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d10d      	bne.n	8000aae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_TIM_PWM_MspInit+0x40>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <HAL_TIM_PWM_MspInit+0x40>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_TIM_PWM_MspInit+0x40>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40000c00 	.word	0x40000c00
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_TIM_MspPostInit+0x68>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d11d      	bne.n	8000b22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_TIM_MspPostInit+0x6c>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_TIM_MspPostInit+0x6c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_TIM_MspPostInit+0x6c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b02:	230f      	movs	r3, #15
 8000b04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_TIM_MspPostInit+0x70>)
 8000b1e:	f000 fe47 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40000c00 	.word	0x40000c00
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART1_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART1_UART_Init+0x4c>)
 8000b70:	f003 fe44 	bl	80047fc <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f7ff fe6d 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000c8 	.word	0x200000c8
 8000b88:	40011000 	.word	0x40011000

08000b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <HAL_UART_MspInit+0x150>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 8091 	bne.w	8000cd2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <HAL_UART_MspInit+0x154>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	4a49      	ldr	r2, [pc, #292]	; (8000ce0 <HAL_UART_MspInit+0x154>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc0:	4b47      	ldr	r3, [pc, #284]	; (8000ce0 <HAL_UART_MspInit+0x154>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b43      	ldr	r3, [pc, #268]	; (8000ce0 <HAL_UART_MspInit+0x154>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a42      	ldr	r2, [pc, #264]	; (8000ce0 <HAL_UART_MspInit+0x154>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <HAL_UART_MspInit+0x154>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4837      	ldr	r0, [pc, #220]	; (8000ce4 <HAL_UART_MspInit+0x158>)
 8000c06:	f000 fdd3 	bl	80017b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c0c:	4a37      	ldr	r2, [pc, #220]	; (8000cec <HAL_UART_MspInit+0x160>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c18:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c24:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c38:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c4a:	4827      	ldr	r0, [pc, #156]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c4c:	f000 fa26 	bl	800109c <HAL_DMA_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c56:	f7ff fdff 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c5e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <HAL_UART_MspInit+0x15c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <HAL_UART_MspInit+0x168>)
 8000c6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c74:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c76:	2240      	movs	r2, #64	; 0x40
 8000c78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ca6:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000ca8:	f000 f9f8 	bl	800109c <HAL_DMA_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000cb2:	f7ff fdd1 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <HAL_UART_MspInit+0x164>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2025      	movs	r0, #37	; 0x25
 8000cc8:	f000 f9b1 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ccc:	2025      	movs	r0, #37	; 0x25
 8000cce:	f000 f9ca 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	2000010c 	.word	0x2000010c
 8000cec:	40026440 	.word	0x40026440
 8000cf0:	2000016c 	.word	0x2000016c
 8000cf4:	400264b8 	.word	0x400264b8

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfe:	490e      	ldr	r1, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d14:	4c0b      	ldr	r4, [pc, #44]	; (8000d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d22:	f7ff fe21 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f006 ffab 	bl	8007c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2a:	f7ff fd09 	bl	8000740 <main>
  bx  lr    
 8000d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d3c:	08007d54 	.word	0x08007d54
  ldr r2, =_sbss
 8000d40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d44:	20000f18 	.word	0x20000f18

08000d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <HAL_Init+0x40>)
 8000d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_Init+0x40>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_Init+0x40>)
 8000d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f94f 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fd70 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023c00 	.word	0x40023c00

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f967 	bl	8001082 <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f92f 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	200001cc 	.word	0x200001cc

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200001cc 	.word	0x200001cc

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff3e 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff8e 	bl	8000f6c <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff31 	bl	8000edc <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa2 	bl	8000fd4 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff feb6 	bl	8000e18 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e099      	b.n	80011ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d8:	e00f      	b.n	80010fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010da:	f7ff fe9d 	bl	8000e18 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d908      	bls.n	80010fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2220      	movs	r2, #32
 80010ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e078      	b.n	80011ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1e8      	bne.n	80010da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <HAL_DMA_Init+0x158>)
 8001114:	4013      	ands	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4313      	orrs	r3, r2
 800114a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	2b04      	cmp	r3, #4
 8001152:	d107      	bne.n	8001164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4313      	orrs	r3, r2
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f023 0307 	bic.w	r3, r3, #7
 800117a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4313      	orrs	r3, r2
 8001184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	2b04      	cmp	r3, #4
 800118c:	d117      	bne.n	80011be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4313      	orrs	r3, r2
 8001196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00e      	beq.n	80011be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fa89 	bl	80016b8 <DMA_CheckFifoParam>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d008      	beq.n	80011be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2240      	movs	r2, #64	; 0x40
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ba:	2301      	movs	r3, #1
 80011bc:	e016      	b.n	80011ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa40 	bl	800164c <DMA_CalcBaseAndBitshift>
 80011cc:	4603      	mov	r3, r0
 80011ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d4:	223f      	movs	r2, #63	; 0x3f
 80011d6:	409a      	lsls	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	f010803f 	.word	0xf010803f

080011f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001206:	f7ff fe07 	bl	8000e18 <HAL_GetTick>
 800120a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d008      	beq.n	800122a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e052      	b.n	80012d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0216 	bic.w	r2, r2, #22
 8001238:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001248:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <HAL_DMA_Abort+0x62>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0208 	bic.w	r2, r2, #8
 8001268:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0201 	bic.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127a:	e013      	b.n	80012a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127c:	f7ff fdcc 	bl	8000e18 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b05      	cmp	r3, #5
 8001288:	d90c      	bls.n	80012a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2220      	movs	r2, #32
 800128e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2203      	movs	r2, #3
 8001294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e015      	b.n	80012d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1e4      	bne.n	800127c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b6:	223f      	movs	r2, #63	; 0x3f
 80012b8:	409a      	lsls	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d004      	beq.n	80012f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00c      	b.n	8001310 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2205      	movs	r2, #5
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001328:	4b8e      	ldr	r3, [pc, #568]	; (8001564 <HAL_DMA_IRQHandler+0x248>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a8e      	ldr	r2, [pc, #568]	; (8001568 <HAL_DMA_IRQHandler+0x24c>)
 800132e:	fba2 2303 	umull	r2, r3, r2, r3
 8001332:	0a9b      	lsrs	r3, r3, #10
 8001334:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001346:	2208      	movs	r2, #8
 8001348:	409a      	lsls	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01a      	beq.n	8001388 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0204 	bic.w	r2, r2, #4
 800136e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001374:	2208      	movs	r2, #8
 8001376:	409a      	lsls	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001380:	f043 0201 	orr.w	r2, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138c:	2201      	movs	r2, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d012      	beq.n	80013be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013aa:	2201      	movs	r2, #1
 80013ac:	409a      	lsls	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f043 0202 	orr.w	r2, r3, #2
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	2204      	movs	r2, #4
 80013c4:	409a      	lsls	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d012      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e0:	2204      	movs	r2, #4
 80013e2:	409a      	lsls	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ec:	f043 0204 	orr.w	r2, r3, #4
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	2210      	movs	r2, #16
 80013fa:	409a      	lsls	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d043      	beq.n	800148c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d03c      	beq.n	800148c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	2210      	movs	r2, #16
 8001418:	409a      	lsls	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d018      	beq.n	800145e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d108      	bne.n	800144c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d024      	beq.n	800148c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
 800144a:	e01f      	b.n	800148c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01b      	beq.n	800148c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	4798      	blx	r3
 800145c:	e016      	b.n	800148c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d107      	bne.n	800147c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0208 	bic.w	r2, r2, #8
 800147a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	2220      	movs	r2, #32
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 808f 	beq.w	80015bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8087 	beq.w	80015bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b2:	2220      	movs	r2, #32
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d136      	bne.n	8001534 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0216 	bic.w	r2, r2, #22
 80014d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <HAL_DMA_IRQHandler+0x1da>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0208 	bic.w	r2, r2, #8
 8001504:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150a:	223f      	movs	r2, #63	; 0x3f
 800150c:	409a      	lsls	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001526:	2b00      	cmp	r3, #0
 8001528:	d07e      	beq.n	8001628 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
        }
        return;
 8001532:	e079      	b.n	8001628 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01d      	beq.n	800157e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10d      	bne.n	800156c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	2b00      	cmp	r3, #0
 8001556:	d031      	beq.n	80015bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
 8001560:	e02c      	b.n	80015bc <HAL_DMA_IRQHandler+0x2a0>
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000
 8001568:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001570:	2b00      	cmp	r3, #0
 8001572:	d023      	beq.n	80015bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	4798      	blx	r3
 800157c:	e01e      	b.n	80015bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10f      	bne.n	80015ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0210 	bic.w	r2, r2, #16
 800159a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d032      	beq.n	800162a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d022      	beq.n	8001616 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2205      	movs	r2, #5
 80015d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0201 	bic.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d307      	bcc.n	8001604 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f2      	bne.n	80015e8 <HAL_DMA_IRQHandler+0x2cc>
 8001602:	e000      	b.n	8001606 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001604:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
 8001626:	e000      	b.n	800162a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001628:	bf00      	nop
    }
  }
}
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800163e:	b2db      	uxtb	r3, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	3b10      	subs	r3, #16
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <DMA_CalcBaseAndBitshift+0x64>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d909      	bls.n	800168e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	1d1a      	adds	r2, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	659a      	str	r2, [r3, #88]	; 0x58
 800168c:	e007      	b.n	800169e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001696:	f023 0303 	bic.w	r3, r3, #3
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	aaaaaaab 	.word	0xaaaaaaab
 80016b4:	08007d3c 	.word	0x08007d3c

080016b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d11f      	bne.n	8001712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d856      	bhi.n	8001786 <DMA_CheckFifoParam+0xce>
 80016d8:	a201      	add	r2, pc, #4	; (adr r2, 80016e0 <DMA_CheckFifoParam+0x28>)
 80016da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016de:	bf00      	nop
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	08001703 	.word	0x08001703
 80016e8:	080016f1 	.word	0x080016f1
 80016ec:	08001787 	.word	0x08001787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d046      	beq.n	800178a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001700:	e043      	b.n	800178a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800170a:	d140      	bne.n	800178e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001710:	e03d      	b.n	800178e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800171a:	d121      	bne.n	8001760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d837      	bhi.n	8001792 <DMA_CheckFifoParam+0xda>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <DMA_CheckFifoParam+0x70>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	08001739 	.word	0x08001739
 800172c:	0800173f 	.word	0x0800173f
 8001730:	08001739 	.word	0x08001739
 8001734:	08001751 	.word	0x08001751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
      break;
 800173c:	e030      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d025      	beq.n	8001796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800174e:	e022      	b.n	8001796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001758:	d11f      	bne.n	800179a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800175e:	e01c      	b.n	800179a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d903      	bls.n	800176e <DMA_CheckFifoParam+0xb6>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d003      	beq.n	8001774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800176c:	e018      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
      break;
 8001772:	e015      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00e      	beq.n	800179e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      break;
 8001784:	e00b      	b.n	800179e <DMA_CheckFifoParam+0xe6>
      break;
 8001786:	bf00      	nop
 8001788:	e00a      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e008      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e006      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001792:	bf00      	nop
 8001794:	e004      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
 8001798:	e002      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <DMA_CheckFifoParam+0xe8>
      break;
 800179e:	bf00      	nop
    }
  } 
  
  return status; 
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e16b      	b.n	8001aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 815a 	bne.w	8001a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80b4 	beq.w	8001a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_GPIO_Init+0x30c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a5f      	ldr	r2, [pc, #380]	; (8001abc <HAL_GPIO_Init+0x30c>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_GPIO_Init+0x30c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a5b      	ldr	r2, [pc, #364]	; (8001ac0 <HAL_GPIO_Init+0x310>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x314>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02b      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <HAL_GPIO_Init+0x318>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x222>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a50      	ldr	r2, [pc, #320]	; (8001acc <HAL_GPIO_Init+0x31c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x21e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <HAL_GPIO_Init+0x320>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_GPIO_Init+0x324>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x216>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_GPIO_Init+0x328>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x212>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x32c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x20e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x20a>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e00e      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ba:	2308      	movs	r3, #8
 80019bc:	e00c      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019be:	2306      	movs	r3, #6
 80019c0:	e00a      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c2:	2305      	movs	r3, #5
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x310>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f ae90 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40021400 	.word	0x40021400
 8001adc:	40021800 	.word	0x40021800
 8001ae0:	40021c00 	.word	0x40021c00
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e12b      	b.n	8001dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d106      	bne.n	8001b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7fe fd68 	bl	800064c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	; 0x24
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb4:	f002 fa1c 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8001bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a81      	ldr	r2, [pc, #516]	; (8001dc4 <HAL_I2C_Init+0x274>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d807      	bhi.n	8001bd4 <HAL_I2C_Init+0x84>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4a80      	ldr	r2, [pc, #512]	; (8001dc8 <HAL_I2C_Init+0x278>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	bf94      	ite	ls
 8001bcc:	2301      	movls	r3, #1
 8001bce:	2300      	movhi	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e006      	b.n	8001be2 <HAL_I2C_Init+0x92>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a7d      	ldr	r2, [pc, #500]	; (8001dcc <HAL_I2C_Init+0x27c>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	bf94      	ite	ls
 8001bdc:	2301      	movls	r3, #1
 8001bde:	2300      	movhi	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0e7      	b.n	8001dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4a78      	ldr	r2, [pc, #480]	; (8001dd0 <HAL_I2C_Init+0x280>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0c9b      	lsrs	r3, r3, #18
 8001bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a6a      	ldr	r2, [pc, #424]	; (8001dc4 <HAL_I2C_Init+0x274>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d802      	bhi.n	8001c24 <HAL_I2C_Init+0xd4>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3301      	adds	r3, #1
 8001c22:	e009      	b.n	8001c38 <HAL_I2C_Init+0xe8>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a69      	ldr	r2, [pc, #420]	; (8001dd4 <HAL_I2C_Init+0x284>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	3301      	adds	r3, #1
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	495c      	ldr	r1, [pc, #368]	; (8001dc4 <HAL_I2C_Init+0x274>)
 8001c54:	428b      	cmp	r3, r1
 8001c56:	d819      	bhi.n	8001c8c <HAL_I2C_Init+0x13c>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1e59      	subs	r1, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c66:	1c59      	adds	r1, r3, #1
 8001c68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <HAL_I2C_Init+0x138>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1e59      	subs	r1, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c86:	e051      	b.n	8001d2c <HAL_I2C_Init+0x1dc>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	e04f      	b.n	8001d2c <HAL_I2C_Init+0x1dc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d111      	bne.n	8001cb8 <HAL_I2C_Init+0x168>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1e58      	subs	r0, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	440b      	add	r3, r1
 8001ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	e012      	b.n	8001cde <HAL_I2C_Init+0x18e>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e58      	subs	r0, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	0099      	lsls	r1, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Init+0x196>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e022      	b.n	8001d2c <HAL_I2C_Init+0x1dc>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10e      	bne.n	8001d0c <HAL_I2C_Init+0x1bc>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1e58      	subs	r0, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6859      	ldr	r1, [r3, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	440b      	add	r3, r1
 8001cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d0a:	e00f      	b.n	8001d2c <HAL_I2C_Init+0x1dc>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e58      	subs	r0, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	0099      	lsls	r1, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	6809      	ldr	r1, [r1, #0]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6911      	ldr	r1, [r2, #16]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68d2      	ldr	r2, [r2, #12]
 8001d66:	4311      	orrs	r1, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2220      	movs	r2, #32
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	000186a0 	.word	0x000186a0
 8001dc8:	001e847f 	.word	0x001e847f
 8001dcc:	003d08ff 	.word	0x003d08ff
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001df8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e00:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d003      	beq.n	8001e10 <HAL_I2C_EV_IRQHandler+0x38>
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	2b40      	cmp	r3, #64	; 0x40
 8001e0c:	f040 80c1 	bne.w	8001f92 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <HAL_I2C_EV_IRQHandler+0x6e>
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001e30:	d003      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x62>
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_EV_IRQHandler+0x66>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x68>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	f000 8132 	beq.w	80020aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <HAL_I2C_EV_IRQHandler+0x92>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	0a5b      	lsrs	r3, r3, #9
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f001 fc7b 	bl	8003758 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fd83 	bl	800296e <I2C_Master_SB>
 8001e68:	e092      	b.n	8001f90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0xb2>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	0a5b      	lsrs	r3, r3, #9
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fdf9 	bl	8002a7a <I2C_Master_ADD10>
 8001e88:	e082      	b.n	8001f90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d009      	beq.n	8001eaa <HAL_I2C_EV_IRQHandler+0xd2>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	0a5b      	lsrs	r3, r3, #9
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fe13 	bl	8002ace <I2C_Master_ADDR>
 8001ea8:	e072      	b.n	8001f90 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d03b      	beq.n	8001f2e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec4:	f000 80f3 	beq.w	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	09db      	lsrs	r3, r3, #7
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00f      	beq.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f9f3 	bl	80022d8 <I2C_MasterTransmit_TXE>
 8001ef2:	e04d      	b.n	8001f90 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80d6 	beq.w	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	0a5b      	lsrs	r3, r3, #9
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80cf 	beq.w	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	2b21      	cmp	r3, #33	; 0x21
 8001f14:	d103      	bne.n	8001f1e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa7a 	bl	8002410 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1c:	e0c7      	b.n	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	f040 80c4 	bne.w	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fae8 	bl	80024fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f2c:	e0bf      	b.n	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f3c:	f000 80b7 	beq.w	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00f      	beq.n	8001f6c <HAL_I2C_EV_IRQHandler+0x194>
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	0a9b      	lsrs	r3, r3, #10
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <HAL_I2C_EV_IRQHandler+0x194>
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fb5d 	bl	8002624 <I2C_MasterReceive_RXNE>
 8001f6a:	e011      	b.n	8001f90 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 809a 	beq.w	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	0a5b      	lsrs	r3, r3, #9
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8093 	beq.w	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fc06 	bl	800279a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f8e:	e08e      	b.n	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f90:	e08d      	b.n	80020ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d004      	beq.n	8001fa4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	e007      	b.n	8001fb4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d012      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x20e>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	0a5b      	lsrs	r3, r3, #9
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00c      	beq.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 ffc4 	bl	8002f6c <I2C_Slave_ADDR>
 8001fe4:	e066      	b.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_I2C_EV_IRQHandler+0x22e>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	0a5b      	lsrs	r3, r3, #9
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fffe 	bl	8003000 <I2C_Slave_STOPF>
 8002004:	e056      	b.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002006:	7bbb      	ldrb	r3, [r7, #14]
 8002008:	2b21      	cmp	r3, #33	; 0x21
 800200a:	d002      	beq.n	8002012 <HAL_I2C_EV_IRQHandler+0x23a>
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	2b29      	cmp	r3, #41	; 0x29
 8002010:	d125      	bne.n	800205e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	09db      	lsrs	r3, r3, #7
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00f      	beq.n	800203e <HAL_I2C_EV_IRQHandler+0x266>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	0a9b      	lsrs	r3, r3, #10
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_I2C_EV_IRQHandler+0x266>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	089b      	lsrs	r3, r3, #2
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 feda 	bl	8002df0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800203c:	e039      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d033      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2da>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	0a5b      	lsrs	r3, r3, #9
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d02d      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 ff07 	bl	8002e6a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800205c:	e029      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00f      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0x2b2>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	0a9b      	lsrs	r3, r3, #10
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 ff12 	bl	8002eac <I2C_SlaveReceive_RXNE>
 8002088:	e014      	b.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00e      	beq.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	0a5b      	lsrs	r3, r3, #9
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 ff40 	bl	8002f28 <I2C_SlaveReceive_BTF>
 80020a8:	e004      	b.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80020aa:	bf00      	nop
 80020ac:	e002      	b.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ae:	bf00      	nop
 80020b0:	e000      	b.n	80020b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08a      	sub	sp, #40	; 0x28
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00e      	beq.n	8002108 <HAL_I2C_ER_IRQHandler+0x4e>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002106:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00e      	beq.n	8002132 <HAL_I2C_ER_IRQHandler+0x78>
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002130:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	0a9b      	lsrs	r3, r3, #10
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03f      	beq.n	80021be <HAL_I2C_ER_IRQHandler+0x104>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d039      	beq.n	80021be <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800214a:	7efb      	ldrb	r3, [r7, #27]
 800214c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002164:	7ebb      	ldrb	r3, [r7, #26]
 8002166:	2b20      	cmp	r3, #32
 8002168:	d112      	bne.n	8002190 <HAL_I2C_ER_IRQHandler+0xd6>
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10f      	bne.n	8002190 <HAL_I2C_ER_IRQHandler+0xd6>
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b21      	cmp	r3, #33	; 0x21
 8002174:	d008      	beq.n	8002188 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b29      	cmp	r3, #41	; 0x29
 800217a:	d005      	beq.n	8002188 <HAL_I2C_ER_IRQHandler+0xce>
 800217c:	7cfb      	ldrb	r3, [r7, #19]
 800217e:	2b28      	cmp	r3, #40	; 0x28
 8002180:	d106      	bne.n	8002190 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b21      	cmp	r3, #33	; 0x21
 8002186:	d103      	bne.n	8002190 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f001 f869 	bl	8003260 <I2C_Slave_AF>
 800218e:	e016      	b.n	80021be <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002198:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80021a2:	7efb      	ldrb	r3, [r7, #27]
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d002      	beq.n	80021ae <HAL_I2C_ER_IRQHandler+0xf4>
 80021a8:	7efb      	ldrb	r3, [r7, #27]
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d107      	bne.n	80021be <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021bc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	0adb      	lsrs	r3, r3, #11
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00e      	beq.n	80021e8 <HAL_I2C_ER_IRQHandler+0x12e>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80021e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f001 f8a0 	bl	8003340 <I2C_ITError>
  }
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	4613      	mov	r3, r2
 8002266:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d150      	bne.n	80023a0 <I2C_MasterTransmit_TXE+0xc8>
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b21      	cmp	r3, #33	; 0x21
 8002302:	d14d      	bne.n	80023a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b08      	cmp	r3, #8
 8002308:	d01d      	beq.n	8002346 <I2C_MasterTransmit_TXE+0x6e>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b20      	cmp	r3, #32
 800230e:	d01a      	beq.n	8002346 <I2C_MasterTransmit_TXE+0x6e>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002316:	d016      	beq.n	8002346 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002326:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2211      	movs	r2, #17
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ff62 	bl	8002208 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002344:	e060      	b.n	8002408 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002354:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002364:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d107      	bne.n	8002390 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff7d 	bl	8002288 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800238e:	e03b      	b.n	8002408 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff35 	bl	8002208 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800239e:	e033      	b.n	8002408 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b21      	cmp	r3, #33	; 0x21
 80023a4:	d005      	beq.n	80023b2 <I2C_MasterTransmit_TXE+0xda>
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d12d      	bne.n	8002408 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	2b22      	cmp	r3, #34	; 0x22
 80023b0:	d12a      	bne.n	8002408 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d108      	bne.n	80023ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023cc:	e01c      	b.n	8002408 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	d103      	bne.n	80023e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f88e 	bl	80024fc <I2C_MemoryTransmit_TXE_BTF>
}
 80023e0:	e012      	b.n	8002408 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002406:	e7ff      	b.n	8002408 <I2C_MasterTransmit_TXE+0x130>
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b21      	cmp	r3, #33	; 0x21
 8002428:	d164      	bne.n	80024f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d012      	beq.n	800245a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002458:	e04c      	b.n	80024f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d01d      	beq.n	800249c <I2C_MasterTransmit_BTF+0x8c>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b20      	cmp	r3, #32
 8002464:	d01a      	beq.n	800249c <I2C_MasterTransmit_BTF+0x8c>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800246c:	d016      	beq.n	800249c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800247c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2211      	movs	r2, #17
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff feb7 	bl	8002208 <HAL_I2C_MasterTxCpltCallback>
}
 800249a:	e02b      	b.n	80024f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d107      	bne.n	80024e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fed2 	bl	8002288 <HAL_I2C_MemTxCpltCallback>
}
 80024e4:	e006      	b.n	80024f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fe8a 	bl	8002208 <HAL_I2C_MasterTxCpltCallback>
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11d      	bne.n	8002550 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10b      	bne.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002520:	b2da      	uxtb	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252c:	1c9a      	adds	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002532:	e073      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	b29b      	uxth	r3, r3
 800253a:	121b      	asrs	r3, r3, #8
 800253c:	b2da      	uxtb	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800254e:	e065      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10b      	bne.n	8002570 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800256e:	e055      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	2b02      	cmp	r3, #2
 8002576:	d151      	bne.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b22      	cmp	r3, #34	; 0x22
 800257c:	d10d      	bne.n	800259a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002598:	e040      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d015      	beq.n	80025d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b21      	cmp	r3, #33	; 0x21
 80025a8:	d112      	bne.n	80025d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025ce:	e025      	b.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d120      	bne.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	2b21      	cmp	r3, #33	; 0x21
 80025de:	d11d      	bne.n	800261c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fe36 	bl	8002288 <HAL_I2C_MemTxCpltCallback>
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b22      	cmp	r3, #34	; 0x22
 8002636:	f040 80ac 	bne.w	8002792 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d921      	bls.n	800268c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b03      	cmp	r3, #3
 8002676:	f040 808c 	bne.w	8002792 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002688:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800268a:	e082      	b.n	8002792 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	2b02      	cmp	r3, #2
 8002692:	d075      	beq.n	8002780 <I2C_MasterReceive_RXNE+0x15c>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d002      	beq.n	80026a0 <I2C_MasterReceive_RXNE+0x7c>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d16f      	bne.n	8002780 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f001 f827 	bl	80036f4 <I2C_WaitOnSTOPRequestThroughIT>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d142      	bne.n	8002732 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b40      	cmp	r3, #64	; 0x40
 8002704:	d10a      	bne.n	800271c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fdc1 	bl	800229c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800271a:	e03a      	b.n	8002792 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2212      	movs	r2, #18
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fd76 	bl	800221c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002730:	e02f      	b.n	8002792 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002740:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fd99 	bl	80022b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800277e:	e008      	b.n	8002792 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278e:	605a      	str	r2, [r3, #4]
}
 8002790:	e7ff      	b.n	8002792 <I2C_MasterReceive_RXNE+0x16e>
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d11b      	bne.n	80027ea <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027e8:	e0bd      	b.n	8002966 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d129      	bne.n	8002848 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002802:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d00a      	beq.n	8002820 <I2C_MasterReceive_BTF+0x86>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d007      	beq.n	8002820 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002846:	e08e      	b.n	8002966 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d176      	bne.n	8002940 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d002      	beq.n	800285e <I2C_MasterReceive_BTF+0xc4>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b10      	cmp	r3, #16
 800285c:	d108      	bne.n	8002870 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e019      	b.n	80028a4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d002      	beq.n	800287c <I2C_MasterReceive_BTF+0xe2>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d108      	bne.n	800288e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e00a      	b.n	80028a4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b10      	cmp	r3, #16
 8002892:	d007      	beq.n	80028a4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d10a      	bne.n	800292a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fcba 	bl	800229c <HAL_I2C_MemRxCpltCallback>
}
 8002928:	e01d      	b.n	8002966 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2212      	movs	r2, #18
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fc6f 	bl	800221c <HAL_I2C_MasterRxCpltCallback>
}
 800293e:	e012      	b.n	8002966 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d117      	bne.n	80029b2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800299a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800299c:	e067      	b.n	8002a6e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	611a      	str	r2, [r3, #16]
}
 80029b0:	e05d      	b.n	8002a6e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ba:	d133      	bne.n	8002a24 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b21      	cmp	r3, #33	; 0x21
 80029c6:	d109      	bne.n	80029dc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]
 80029da:	e008      	b.n	80029ee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <I2C_Master_SB+0x92>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d108      	bne.n	8002a12 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d032      	beq.n	8002a6e <I2C_Master_SB+0x100>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d02d      	beq.n	8002a6e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a20:	605a      	str	r2, [r3, #4]
}
 8002a22:	e024      	b.n	8002a6e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10e      	bne.n	8002a4a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	11db      	asrs	r3, r3, #7
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0306 	and.w	r3, r3, #6
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f063 030f 	orn	r3, r3, #15
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
}
 8002a48:	e011      	b.n	8002a6e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10d      	bne.n	8002a6e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	11db      	asrs	r3, r3, #7
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 0306 	and.w	r3, r3, #6
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f063 030e 	orn	r3, r3, #14
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	611a      	str	r2, [r3, #16]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <I2C_Master_ADD10+0x26>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d108      	bne.n	8002ab2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00c      	beq.n	8002ac2 <I2C_Master_ADD10+0x48>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac0:	605a      	str	r2, [r3, #4]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b091      	sub	sp, #68	; 0x44
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002adc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b22      	cmp	r3, #34	; 0x22
 8002af6:	f040 8169 	bne.w	8002dcc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <I2C_Master_ADDR+0x54>
 8002b02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d10b      	bne.n	8002b22 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	633b      	str	r3, [r7, #48]	; 0x30
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	e160      	b.n	8002de4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11d      	bne.n	8002b66 <I2C_Master_ADDR+0x98>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b32:	d118      	bne.n	8002b66 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b58:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	651a      	str	r2, [r3, #80]	; 0x50
 8002b64:	e13e      	b.n	8002de4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d113      	bne.n	8002b98 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e115      	b.n	8002dc4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	f040 808a 	bne.w	8002cb8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002baa:	d137      	bne.n	8002c1c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bca:	d113      	bne.n	8002bf4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bda:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	e0e7      	b.n	8002dc4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e0d3      	b.n	8002dc4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d02e      	beq.n	8002c80 <I2C_Master_ADDR+0x1b2>
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d02b      	beq.n	8002c80 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2a:	2b12      	cmp	r3, #18
 8002c2c:	d102      	bne.n	8002c34 <I2C_Master_ADDR+0x166>
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d125      	bne.n	8002c80 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d00e      	beq.n	8002c58 <I2C_Master_ADDR+0x18a>
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d00b      	beq.n	8002c58 <I2C_Master_ADDR+0x18a>
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d008      	beq.n	8002c58 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e007      	b.n	8002c68 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c66:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	e0a1      	b.n	8002dc4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c90:	2300      	movs	r3, #0
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e085      	b.n	8002dc4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d14d      	bne.n	8002d5e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d016      	beq.n	8002cf6 <I2C_Master_ADDR+0x228>
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d013      	beq.n	8002cf6 <I2C_Master_ADDR+0x228>
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d010      	beq.n	8002cf6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e007      	b.n	8002d06 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d04:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d14:	d117      	bne.n	8002d46 <I2C_Master_ADDR+0x278>
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d1c:	d00b      	beq.n	8002d36 <I2C_Master_ADDR+0x268>
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d008      	beq.n	8002d36 <I2C_Master_ADDR+0x268>
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d005      	beq.n	8002d36 <I2C_Master_ADDR+0x268>
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d002      	beq.n	8002d36 <I2C_Master_ADDR+0x268>
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d107      	bne.n	8002d46 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	e032      	b.n	8002dc4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d6c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7c:	d117      	bne.n	8002dae <I2C_Master_ADDR+0x2e0>
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d84:	d00b      	beq.n	8002d9e <I2C_Master_ADDR+0x2d0>
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d008      	beq.n	8002d9e <I2C_Master_ADDR+0x2d0>
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d005      	beq.n	8002d9e <I2C_Master_ADDR+0x2d0>
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	2b10      	cmp	r3, #16
 8002d96:	d002      	beq.n	8002d9e <I2C_Master_ADDR+0x2d0>
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d107      	bne.n	8002dae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002dca:	e00b      	b.n	8002de4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
}
 8002de2:	e7ff      	b.n	8002de4 <I2C_Master_ADDR+0x316>
 8002de4:	bf00      	nop
 8002de6:	3744      	adds	r7, #68	; 0x44
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d02b      	beq.n	8002e62 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d114      	bne.n	8002e62 <I2C_SlaveTransmit_TXE+0x72>
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b29      	cmp	r3, #41	; 0x29
 8002e3c:	d111      	bne.n	8002e62 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2228      	movs	r2, #40	; 0x28
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff f9e7 	bl	8002230 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d011      	beq.n	8002ea0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d02c      	beq.n	8002f20 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d114      	bne.n	8002f20 <I2C_SlaveReceive_RXNE+0x74>
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8002efa:	d111      	bne.n	8002f20 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2222      	movs	r2, #34	; 0x22
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2228      	movs	r2, #40	; 0x28
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff f992 	bl	8002244 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f86:	2b28      	cmp	r3, #40	; 0x28
 8002f88:	d127      	bne.n	8002fda <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f98:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	09db      	lsrs	r3, r3, #7
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	81bb      	strh	r3, [r7, #12]
 8002fbc:	e002      	b.n	8002fc4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fcc:	89ba      	ldrh	r2, [r7, #12]
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff f940 	bl	8002258 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fd8:	e00e      	b.n	8002ff8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800301e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305c:	d172      	bne.n	8003144 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b22      	cmp	r3, #34	; 0x22
 8003062:	d002      	beq.n	800306a <I2C_Slave_STOPF+0x6a>
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	2b2a      	cmp	r3, #42	; 0x2a
 8003068:	d135      	bne.n	80030d6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f043 0204 	orr.w	r2, r3, #4
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fac4 	bl	8001630 <HAL_DMA_GetState>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d049      	beq.n	8003142 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b2:	4a69      	ldr	r2, [pc, #420]	; (8003258 <I2C_Slave_STOPF+0x258>)
 80030b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe f90c 	bl	80012d8 <HAL_DMA_Abort_IT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03d      	beq.n	8003142 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d0:	4610      	mov	r0, r2
 80030d2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030d4:	e035      	b.n	8003142 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0204 	orr.w	r2, r3, #4
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003108:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fa8e 	bl	8001630 <HAL_DMA_GetState>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d014      	beq.n	8003144 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <I2C_Slave_STOPF+0x258>)
 8003120:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f8d6 	bl	80012d8 <HAL_DMA_Abort_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800313c:	4610      	mov	r0, r2
 800313e:	4798      	blx	r3
 8003140:	e000      	b.n	8003144 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003142:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d03e      	beq.n	80031cc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d112      	bne.n	8003182 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d112      	bne.n	80031b6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8b3 	bl	8003340 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031da:	e039      	b.n	8003250 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
 80031de:	2b2a      	cmp	r3, #42	; 0x2a
 80031e0:	d109      	bne.n	80031f6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2228      	movs	r2, #40	; 0x28
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff f827 	bl	8002244 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b28      	cmp	r3, #40	; 0x28
 8003200:	d111      	bne.n	8003226 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a15      	ldr	r2, [pc, #84]	; (800325c <I2C_Slave_STOPF+0x25c>)
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff f828 	bl	8002274 <HAL_I2C_ListenCpltCallback>
}
 8003224:	e014      	b.n	8003250 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	2b22      	cmp	r3, #34	; 0x22
 800322c:	d002      	beq.n	8003234 <I2C_Slave_STOPF+0x234>
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b22      	cmp	r3, #34	; 0x22
 8003232:	d10d      	bne.n	8003250 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fe fffa 	bl	8002244 <HAL_I2C_SlaveRxCpltCallback>
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	080035a5 	.word	0x080035a5
 800325c:	ffff0000 	.word	0xffff0000

08003260 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d002      	beq.n	8003282 <I2C_Slave_AF+0x22>
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2b20      	cmp	r3, #32
 8003280:	d129      	bne.n	80032d6 <I2C_Slave_AF+0x76>
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	2b28      	cmp	r3, #40	; 0x28
 8003286:	d126      	bne.n	80032d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a2c      	ldr	r2, [pc, #176]	; (800333c <I2C_Slave_AF+0xdc>)
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800329c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe ffd0 	bl	8002274 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032d4:	e02e      	b.n	8003334 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b21      	cmp	r3, #33	; 0x21
 80032da:	d126      	bne.n	800332a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a17      	ldr	r2, [pc, #92]	; (800333c <I2C_Slave_AF+0xdc>)
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2221      	movs	r2, #33	; 0x21
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003306:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003310:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003320:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fe ff84 	bl	8002230 <HAL_I2C_SlaveTxCpltCallback>
}
 8003328:	e004      	b.n	8003334 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003332:	615a      	str	r2, [r3, #20]
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	ffff0000 	.word	0xffff0000

08003340 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003356:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003358:	7bbb      	ldrb	r3, [r7, #14]
 800335a:	2b10      	cmp	r3, #16
 800335c:	d002      	beq.n	8003364 <I2C_ITError+0x24>
 800335e:	7bbb      	ldrb	r3, [r7, #14]
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d10a      	bne.n	800337a <I2C_ITError+0x3a>
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b22      	cmp	r3, #34	; 0x22
 8003368:	d107      	bne.n	800337a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003378:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003380:	2b28      	cmp	r3, #40	; 0x28
 8003382:	d107      	bne.n	8003394 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2228      	movs	r2, #40	; 0x28
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003392:	e015      	b.n	80033c0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a2:	d00a      	beq.n	80033ba <I2C_ITError+0x7a>
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b60      	cmp	r3, #96	; 0x60
 80033a8:	d007      	beq.n	80033ba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ce:	d162      	bne.n	8003496 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033de:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d020      	beq.n	8003430 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f2:	4a6a      	ldr	r2, [pc, #424]	; (800359c <I2C_ITError+0x25c>)
 80033f4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd ff6c 	bl	80012d8 <HAL_DMA_Abort_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8089 	beq.w	800351a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800342a:	4610      	mov	r0, r2
 800342c:	4798      	blx	r3
 800342e:	e074      	b.n	800351a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	4a59      	ldr	r2, [pc, #356]	; (800359c <I2C_ITError+0x25c>)
 8003436:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd ff4b 	bl	80012d8 <HAL_DMA_Abort_IT>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d068      	beq.n	800351a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d10b      	bne.n	800346e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003490:	4610      	mov	r0, r2
 8003492:	4798      	blx	r3
 8003494:	e041      	b.n	800351a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b60      	cmp	r3, #96	; 0x60
 80034a0:	d125      	bne.n	80034ee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d10b      	bne.n	80034d6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fe feec 	bl	80022c4 <HAL_I2C_AbortCpltCallback>
 80034ec:	e015      	b.n	800351a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d10b      	bne.n	8003514 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7fe fecb 	bl	80022b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10e      	bne.n	8003548 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d113      	bne.n	8003594 <I2C_ITError+0x254>
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b28      	cmp	r3, #40	; 0x28
 8003570:	d110      	bne.n	8003594 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <I2C_ITError+0x260>)
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe fe70 	bl	8002274 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	080035a5 	.word	0x080035a5
 80035a0:	ffff0000 	.word	0xffff0000

080035a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <I2C_DMAAbort+0x148>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	08db      	lsrs	r3, r3, #3
 80035c4:	4a4a      	ldr	r2, [pc, #296]	; (80036f0 <I2C_DMAAbort+0x14c>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0a1a      	lsrs	r2, r3, #8
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	00da      	lsls	r2, r3, #3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f043 0220 	orr.w	r2, r3, #32
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80035ea:	e00a      	b.n	8003602 <I2C_DMAAbort+0x5e>
    }
    count--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d0ea      	beq.n	80035d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	2200      	movs	r2, #0
 8003610:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	2200      	movs	r2, #0
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	2200      	movs	r2, #0
 8003646:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	2200      	movs	r2, #0
 8003656:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b60      	cmp	r3, #96	; 0x60
 8003672:	d10e      	bne.n	8003692 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2200      	movs	r2, #0
 8003688:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7fe fe1a 	bl	80022c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003690:	e027      	b.n	80036e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003698:	2b28      	cmp	r3, #40	; 0x28
 800369a:	d117      	bne.n	80036cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0201 	orr.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	2228      	movs	r2, #40	; 0x28
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80036ca:	e007      	b.n	80036dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80036dc:	6978      	ldr	r0, [r7, #20]
 80036de:	f7fe fde7 	bl	80022b0 <HAL_I2C_ErrorCallback>
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000000 	.word	0x20000000
 80036f0:	14f8b589 	.word	0x14f8b589

080036f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003700:	4b13      	ldr	r3, [pc, #76]	; (8003750 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	0a1a      	lsrs	r2, r3, #8
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3b01      	subs	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f043 0220 	orr.w	r2, r3, #32
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e008      	b.n	8003744 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003740:	d0e9      	beq.n	8003716 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000000 	.word	0x20000000
 8003754:	14f8b589 	.word	0x14f8b589

08003758 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003768:	d103      	bne.n	8003772 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003770:	e007      	b.n	8003782 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800377a:	d102      	bne.n	8003782 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2208      	movs	r2, #8
 8003780:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e267      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d075      	beq.n	800389a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d00c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ba:	4b85      	ldr	r3, [pc, #532]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d112      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4b82      	ldr	r3, [pc, #520]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d2:	d10b      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	4b7e      	ldr	r3, [pc, #504]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05b      	beq.n	8003898 <HAL_RCC_OscConfig+0x108>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d157      	bne.n	8003898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e242      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d106      	bne.n	8003804 <HAL_RCC_OscConfig+0x74>
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a75      	ldr	r2, [pc, #468]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e01d      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x98>
 800380e:	4b70      	ldr	r3, [pc, #448]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a6f      	ldr	r2, [pc, #444]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b6d      	ldr	r3, [pc, #436]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6c      	ldr	r2, [pc, #432]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003828:	4b69      	ldr	r3, [pc, #420]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a68      	ldr	r2, [pc, #416]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a65      	ldr	r2, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fae6 	bl	8000e18 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd fae2 	bl	8000e18 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e207      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0xc0>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd fad2 	bl	8000e18 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003878:	f7fd face 	bl	8000e18 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1f3      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0xe8>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d11c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d116      	bne.n	80038f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_RCC_OscConfig+0x152>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1c7      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4937      	ldr	r1, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	e03a      	b.n	800396e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_RCC_OscConfig+0x244>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fd fa87 	bl	8000e18 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7fd fa83 	bl	8000e18 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e1a8      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4925      	ldr	r1, [pc, #148]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x244>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fa66 	bl	8000e18 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003950:	f7fd fa62 	bl	8000e18 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e187      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d036      	beq.n	80039e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCC_OscConfig+0x248>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fa46 	bl	8000e18 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003990:	f7fd fa42 	bl	8000e18 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e167      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x200>
 80039ae:	e01b      	b.n	80039e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_OscConfig+0x248>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fd fa2f 	bl	8000e18 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	e00e      	b.n	80039dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039be:	f7fd fa2b 	bl	8000e18 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d907      	bls.n	80039dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e150      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	42470000 	.word	0x42470000
 80039d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ea      	bne.n	80039be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8097 	beq.w	8003b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	4b7d      	ldr	r3, [pc, #500]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a7c      	ldr	r2, [pc, #496]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b7a      	ldr	r3, [pc, #488]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b77      	ldr	r3, [pc, #476]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b74      	ldr	r3, [pc, #464]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a73      	ldr	r2, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fd f9eb 	bl	8000e18 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fd f9e7 	bl	8000e18 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e10c      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x2ea>
 8003a6c:	4b64      	ldr	r3, [pc, #400]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a63      	ldr	r2, [pc, #396]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	e01c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x324>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x30c>
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a5e      	ldr	r2, [pc, #376]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a5b      	ldr	r2, [pc, #364]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x324>
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd f9ac 	bl	8000e18 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fd f9a8 	bl	8000e18 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0cb      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ee      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x334>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f996 	bl	8000e18 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd f992 	bl	8000e18 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0b5      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1ee      	bne.n	8003af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	4a38      	ldr	r2, [pc, #224]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80a1 	beq.w	8003c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b2e:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d05c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d141      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCC_OscConfig+0x478>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd f966 	bl	8000e18 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd f962 	bl	8000e18 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e087      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	491b      	ldr	r1, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <HAL_RCC_OscConfig+0x478>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd f93b 	bl	8000e18 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fd f937 	bl	8000e18 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e05c      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x416>
 8003bc4:	e054      	b.n	8003c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_RCC_OscConfig+0x478>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd f924 	bl	8000e18 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd f920 	bl	8000e18 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e045      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x444>
 8003bf2:	e03d      	b.n	8003c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e038      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40007000 	.word	0x40007000
 8003c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x4ec>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d028      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d121      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d11a      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d111      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	3b01      	subs	r3, #1
 8003c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800

08003c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0cc      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d90c      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0b8      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	494d      	ldr	r1, [pc, #308]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d044      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d119      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e07f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e06f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e067      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4934      	ldr	r1, [pc, #208]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d70:	f7fd f852 	bl	8000e18 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fd f84e 	bl	8000e18 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e04f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d20c      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e032      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4916      	ldr	r1, [pc, #88]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e06:	f000 f821 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	5ccb      	ldrb	r3, [r1, r3]
 8003e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc ffb2 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023c00 	.word	0x40023c00
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	08007d24 	.word	0x08007d24
 8003e44:	20000000 	.word	0x20000000
 8003e48:	20000004 	.word	0x20000004

08003e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e50:	b090      	sub	sp, #64	; 0x40
 8003e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
 8003e58:	2300      	movs	r3, #0
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e64:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d00d      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x40>
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	f200 80a1 	bhi.w	8003fb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x34>
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7e:	e09b      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b53      	ldr	r3, [pc, #332]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e84:	e09b      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e86:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e8a:	e098      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e96:	4b4d      	ldr	r3, [pc, #308]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d028      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea2:	4b4a      	ldr	r3, [pc, #296]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	099b      	lsrs	r3, r3, #6
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	627a      	str	r2, [r7, #36]	; 0x24
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb8:	fb03 f201 	mul.w	r2, r3, r1
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	4a43      	ldr	r2, [pc, #268]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec6:	fba0 1202 	umull	r1, r2, r0, r2
 8003eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ecc:	460a      	mov	r2, r1
 8003ece:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed2:	4413      	add	r3, r2
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	2200      	movs	r2, #0
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	61fa      	str	r2, [r7, #28]
 8003ede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ee6:	f7fc f973 	bl	80001d0 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4613      	mov	r3, r2
 8003ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef2:	e053      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef4:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	2200      	movs	r2, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	617a      	str	r2, [r7, #20]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f06:	f04f 0b00 	mov.w	fp, #0
 8003f0a:	4652      	mov	r2, sl
 8003f0c:	465b      	mov	r3, fp
 8003f0e:	f04f 0000 	mov.w	r0, #0
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	0159      	lsls	r1, r3, #5
 8003f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1c:	0150      	lsls	r0, r2, #5
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	ebb2 080a 	subs.w	r8, r2, sl
 8003f26:	eb63 090b 	sbc.w	r9, r3, fp
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f42:	eb63 0509 	sbc.w	r5, r3, r9
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	00eb      	lsls	r3, r5, #3
 8003f50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f54:	00e2      	lsls	r2, r4, #3
 8003f56:	4614      	mov	r4, r2
 8003f58:	461d      	mov	r5, r3
 8003f5a:	eb14 030a 	adds.w	r3, r4, sl
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	eb45 030b 	adc.w	r3, r5, fp
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f72:	4629      	mov	r1, r5
 8003f74:	028b      	lsls	r3, r1, #10
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	028a      	lsls	r2, r1, #10
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	2200      	movs	r2, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	60fa      	str	r2, [r7, #12]
 8003f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f90:	f7fc f91e 	bl	80001d0 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fb6:	e002      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3740      	adds	r7, #64	; 0x40
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	017d7840 	.word	0x017d7840

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ff4:	f7ff fff0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0a9b      	lsrs	r3, r3, #10
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	08007d34 	.word	0x08007d34

08004018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800401c:	f7ff ffdc 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	0b5b      	lsrs	r3, r3, #13
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4903      	ldr	r1, [pc, #12]	; (800403c <HAL_RCC_GetPCLK2Freq+0x24>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	08007d34 	.word	0x08007d34

08004040 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e041      	b.n	80040d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fc fd0a 	bl	8000a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f000 f8f0 	bl	8004264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e0ae      	b.n	800425c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	f200 809f 	bhi.w	800424c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800410e:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004149 	.word	0x08004149
 8004118:	0800424d 	.word	0x0800424d
 800411c:	0800424d 	.word	0x0800424d
 8004120:	0800424d 	.word	0x0800424d
 8004124:	08004189 	.word	0x08004189
 8004128:	0800424d 	.word	0x0800424d
 800412c:	0800424d 	.word	0x0800424d
 8004130:	0800424d 	.word	0x0800424d
 8004134:	080041cb 	.word	0x080041cb
 8004138:	0800424d 	.word	0x0800424d
 800413c:	0800424d 	.word	0x0800424d
 8004140:	0800424d 	.word	0x0800424d
 8004144:	0800420b 	.word	0x0800420b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f928 	bl	80043a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0208 	orr.w	r2, r2, #8
 8004162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0204 	bic.w	r2, r2, #4
 8004172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6999      	ldr	r1, [r3, #24]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	619a      	str	r2, [r3, #24]
      break;
 8004186:	e064      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f978 	bl	8004484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6999      	ldr	r1, [r3, #24]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	021a      	lsls	r2, r3, #8
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	619a      	str	r2, [r3, #24]
      break;
 80041c8:	e043      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f9cd 	bl	8004570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0208 	orr.w	r2, r2, #8
 80041e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0204 	bic.w	r2, r2, #4
 80041f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69d9      	ldr	r1, [r3, #28]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	61da      	str	r2, [r3, #28]
      break;
 8004208:	e023      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68b9      	ldr	r1, [r7, #8]
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa21 	bl	8004658 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69d9      	ldr	r1, [r3, #28]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	021a      	lsls	r2, r3, #8
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	61da      	str	r2, [r3, #28]
      break;
 800424a:	e002      	b.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	75fb      	strb	r3, [r7, #23]
      break;
 8004250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800425a:	7dfb      	ldrb	r3, [r7, #23]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a40      	ldr	r2, [pc, #256]	; (8004378 <TIM_Base_SetConfig+0x114>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d013      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004282:	d00f      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a3d      	ldr	r2, [pc, #244]	; (800437c <TIM_Base_SetConfig+0x118>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a3c      	ldr	r2, [pc, #240]	; (8004380 <TIM_Base_SetConfig+0x11c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3b      	ldr	r2, [pc, #236]	; (8004384 <TIM_Base_SetConfig+0x120>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0x40>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3a      	ldr	r2, [pc, #232]	; (8004388 <TIM_Base_SetConfig+0x124>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d108      	bne.n	80042b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a2f      	ldr	r2, [pc, #188]	; (8004378 <TIM_Base_SetConfig+0x114>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d02b      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c4:	d027      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2c      	ldr	r2, [pc, #176]	; (800437c <TIM_Base_SetConfig+0x118>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d023      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2b      	ldr	r2, [pc, #172]	; (8004380 <TIM_Base_SetConfig+0x11c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01f      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a2a      	ldr	r2, [pc, #168]	; (8004384 <TIM_Base_SetConfig+0x120>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01b      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a29      	ldr	r2, [pc, #164]	; (8004388 <TIM_Base_SetConfig+0x124>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d017      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a28      	ldr	r2, [pc, #160]	; (800438c <TIM_Base_SetConfig+0x128>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a27      	ldr	r2, [pc, #156]	; (8004390 <TIM_Base_SetConfig+0x12c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00f      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a26      	ldr	r2, [pc, #152]	; (8004394 <TIM_Base_SetConfig+0x130>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00b      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a25      	ldr	r2, [pc, #148]	; (8004398 <TIM_Base_SetConfig+0x134>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a24      	ldr	r2, [pc, #144]	; (800439c <TIM_Base_SetConfig+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <TIM_Base_SetConfig+0x13c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d108      	bne.n	8004328 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a0a      	ldr	r2, [pc, #40]	; (8004378 <TIM_Base_SetConfig+0x114>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0xf8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <TIM_Base_SetConfig+0x124>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010000 	.word	0x40010000
 800437c:	40000400 	.word	0x40000400
 8004380:	40000800 	.word	0x40000800
 8004384:	40000c00 	.word	0x40000c00
 8004388:	40010400 	.word	0x40010400
 800438c:	40014000 	.word	0x40014000
 8004390:	40014400 	.word	0x40014400
 8004394:	40014800 	.word	0x40014800
 8004398:	40001800 	.word	0x40001800
 800439c:	40001c00 	.word	0x40001c00
 80043a0:	40002000 	.word	0x40002000

080043a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f023 0201 	bic.w	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f023 0302 	bic.w	r3, r3, #2
 80043ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a20      	ldr	r2, [pc, #128]	; (800447c <TIM_OC1_SetConfig+0xd8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_OC1_SetConfig+0x64>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a1f      	ldr	r2, [pc, #124]	; (8004480 <TIM_OC1_SetConfig+0xdc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10c      	bne.n	8004422 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 0308 	bic.w	r3, r3, #8
 800440e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f023 0304 	bic.w	r3, r3, #4
 8004420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a15      	ldr	r2, [pc, #84]	; (800447c <TIM_OC1_SetConfig+0xd8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_OC1_SetConfig+0x8e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a14      	ldr	r2, [pc, #80]	; (8004480 <TIM_OC1_SetConfig+0xdc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d111      	bne.n	8004456 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40010000 	.word	0x40010000
 8004480:	40010400 	.word	0x40010400

08004484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0210 	bic.w	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0320 	bic.w	r3, r3, #32
 80044ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a22      	ldr	r2, [pc, #136]	; (8004568 <TIM_OC2_SetConfig+0xe4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_OC2_SetConfig+0x68>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a21      	ldr	r2, [pc, #132]	; (800456c <TIM_OC2_SetConfig+0xe8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10d      	bne.n	8004508 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004506:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a17      	ldr	r2, [pc, #92]	; (8004568 <TIM_OC2_SetConfig+0xe4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_OC2_SetConfig+0x94>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a16      	ldr	r2, [pc, #88]	; (800456c <TIM_OC2_SetConfig+0xe8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d113      	bne.n	8004540 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800451e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40010000 	.word	0x40010000
 800456c:	40010400 	.word	0x40010400

08004570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a21      	ldr	r2, [pc, #132]	; (8004650 <TIM_OC3_SetConfig+0xe0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <TIM_OC3_SetConfig+0x66>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a20      	ldr	r2, [pc, #128]	; (8004654 <TIM_OC3_SetConfig+0xe4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d10d      	bne.n	80045f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a16      	ldr	r2, [pc, #88]	; (8004650 <TIM_OC3_SetConfig+0xe0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_OC3_SetConfig+0x92>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <TIM_OC3_SetConfig+0xe4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d113      	bne.n	800462a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40010000 	.word	0x40010000
 8004654:	40010400 	.word	0x40010400

08004658 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	031b      	lsls	r3, r3, #12
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <TIM_OC4_SetConfig+0xa4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_OC4_SetConfig+0x68>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a11      	ldr	r2, [pc, #68]	; (8004700 <TIM_OC4_SetConfig+0xa8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d109      	bne.n	80046d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	621a      	str	r2, [r3, #32]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40010400 	.word	0x40010400

08004704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e05a      	b.n	80047d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d022      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004768:	d01d      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d018      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00e      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d009      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10c      	bne.n	80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000
 80047e4:	40000400 	.word	0x40000400
 80047e8:	40000800 	.word	0x40000800
 80047ec:	40000c00 	.word	0x40000c00
 80047f0:	40010400 	.word	0x40010400
 80047f4:	40014000 	.word	0x40014000
 80047f8:	40001800 	.word	0x40001800

080047fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e03f      	b.n	800488e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc f9b2 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2224      	movs	r2, #36	; 0x24
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fc7b 	bl	800513c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b0ba      	sub	sp, #232	; 0xe8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10f      	bne.n	80048fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_UART_IRQHandler+0x66>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fb65 	bl	8004fc6 <UART_Receive_IT>
      return;
 80048fc:	e256      	b.n	8004dac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80de 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x22c>
 8004908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004918:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80d1 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_UART_IRQHandler+0xae>
 800492e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <HAL_UART_IRQHandler+0xd2>
 8004952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0202 	orr.w	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_UART_IRQHandler+0xf6>
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f043 0204 	orr.w	r2, r3, #4
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d011      	beq.n	80049be <HAL_UART_IRQHandler+0x126>
 800499a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d105      	bne.n	80049b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0208 	orr.w	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 81ed 	beq.w	8004da2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_UART_IRQHandler+0x14e>
 80049d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049d8:	f003 0320 	and.w	r3, r3, #32
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 faf0 	bl	8004fc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	bf0c      	ite	eq
 80049f4:	2301      	moveq	r3, #1
 80049f6:	2300      	movne	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <HAL_UART_IRQHandler+0x17a>
 8004a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d04f      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f9f8 	bl	8004e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d141      	bne.n	8004aaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3314      	adds	r3, #20
 8004a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3314      	adds	r3, #20
 8004a4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1d9      	bne.n	8004a26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d013      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	4a7d      	ldr	r2, [pc, #500]	; (8004c74 <HAL_UART_IRQHandler+0x3dc>)
 8004a80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fc fc26 	bl	80012d8 <HAL_DMA_Abort_IT>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa0:	e00e      	b.n	8004ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f99a 	bl	8004ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	e00a      	b.n	8004ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f996 	bl	8004ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab0:	e006      	b.n	8004ac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f992 	bl	8004ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004abe:	e170      	b.n	8004da2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	bf00      	nop
    return;
 8004ac2:	e16e      	b.n	8004da2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f040 814a 	bne.w	8004d62 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8143 	beq.w	8004d62 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 813c 	beq.w	8004d62 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	f040 80b4 	bne.w	8004c78 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8140 	beq.w	8004da6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	f080 8139 	bcs.w	8004da6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b46:	f000 8088 	beq.w	8004c5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1d9      	bne.n	8004b4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e1      	bne.n	8004b96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3314      	adds	r3, #20
 8004bf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e3      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2a:	f023 0310 	bic.w	r3, r3, #16
 8004c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e3      	bne.n	8004c18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc facf 	bl	80011f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8c0 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c70:	e099      	b.n	8004da6 <HAL_UART_IRQHandler+0x50e>
 8004c72:	bf00      	nop
 8004c74:	08004ecf 	.word	0x08004ecf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 808b 	beq.w	8004daa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8086 	beq.w	8004daa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cc2:	647a      	str	r2, [r7, #68]	; 0x44
 8004cc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e3      	bne.n	8004c9e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	e853 3f00 	ldrex	r3, [r3]
 8004ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e3      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d40:	61fa      	str	r2, [r7, #28]
 8004d42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	69b9      	ldr	r1, [r7, #24]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e3      	bne.n	8004d1c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f848 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d60:	e023      	b.n	8004daa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_UART_IRQHandler+0x4ea>
 8004d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8bb 	bl	8004ef6 <UART_Transmit_IT>
    return;
 8004d80:	e014      	b.n	8004dac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <HAL_UART_IRQHandler+0x514>
 8004d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d008      	beq.n	8004dac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8fb 	bl	8004f96 <UART_EndTransmit_IT>
    return;
 8004da0:	e004      	b.n	8004dac <HAL_UART_IRQHandler+0x514>
    return;
 8004da2:	bf00      	nop
 8004da4:	e002      	b.n	8004dac <HAL_UART_IRQHandler+0x514>
      return;
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <HAL_UART_IRQHandler+0x514>
      return;
 8004daa:	bf00      	nop
  }
}
 8004dac:	37e8      	adds	r7, #232	; 0xe8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop

08004db4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b095      	sub	sp, #84	; 0x54
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e30:	643a      	str	r2, [r7, #64]	; 0x40
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e5      	bne.n	8004e44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d119      	bne.n	8004eb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0310 	bic.w	r3, r3, #16
 8004e96:	647b      	str	r3, [r7, #68]	; 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ea0:	61ba      	str	r2, [r7, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	613b      	str	r3, [r7, #16]
   return(result);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ec2:	bf00      	nop
 8004ec4:	3754      	adds	r7, #84	; 0x54
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff ff77 	bl	8004ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b21      	cmp	r3, #33	; 0x21
 8004f08:	d13e      	bne.n	8004f88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f12:	d114      	bne.n	8004f3e <UART_Transmit_IT+0x48>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d110      	bne.n	8004f3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	1c9a      	adds	r2, r3, #2
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]
 8004f3c:	e008      	b.n	8004f50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	1c59      	adds	r1, r3, #1
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6211      	str	r1, [r2, #32]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10f      	bne.n	8004f84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff fefc 	bl	8004db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b08c      	sub	sp, #48	; 0x30
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b22      	cmp	r3, #34	; 0x22
 8004fd8:	f040 80ab 	bne.w	8005132 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe4:	d117      	bne.n	8005016 <UART_Receive_IT+0x50>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d113      	bne.n	8005016 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005004:	b29a      	uxth	r2, r3
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
 8005014:	e026      	b.n	8005064 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005028:	d007      	beq.n	800503a <UART_Receive_IT+0x74>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <UART_Receive_IT+0x82>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e008      	b.n	800505a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4619      	mov	r1, r3
 8005072:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005074:	2b00      	cmp	r3, #0
 8005076:	d15a      	bne.n	800512e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0220 	bic.w	r2, r2, #32
 8005086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d135      	bne.n	8005124 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	613b      	str	r3, [r7, #16]
   return(result);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f023 0310 	bic.w	r3, r3, #16
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	623a      	str	r2, [r7, #32]
 80050e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	69f9      	ldr	r1, [r7, #28]
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e5      	bne.n	80050be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d10a      	bne.n	8005116 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff fe67 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
 8005122:	e002      	b.n	800512a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fe4f 	bl	8004dc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e002      	b.n	8005134 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3730      	adds	r7, #48	; 0x30
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005140:	b0c0      	sub	sp, #256	; 0x100
 8005142:	af00      	add	r7, sp, #0
 8005144:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	68d9      	ldr	r1, [r3, #12]
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	ea40 0301 	orr.w	r3, r0, r1
 8005164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	431a      	orrs	r2, r3
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005194:	f021 010c 	bic.w	r1, r1, #12
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051a2:	430b      	orrs	r3, r1
 80051a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	6999      	ldr	r1, [r3, #24]
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	ea40 0301 	orr.w	r3, r0, r1
 80051c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b8f      	ldr	r3, [pc, #572]	; (8005408 <UART_SetConfig+0x2cc>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d005      	beq.n	80051dc <UART_SetConfig+0xa0>
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b8d      	ldr	r3, [pc, #564]	; (800540c <UART_SetConfig+0x2d0>)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d104      	bne.n	80051e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051dc:	f7fe ff1c 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 80051e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051e4:	e003      	b.n	80051ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e6:	f7fe ff03 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 80051ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	f040 810c 	bne.w	8005414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005200:	2200      	movs	r2, #0
 8005202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005206:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800520a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	1891      	adds	r1, r2, r2
 8005214:	65b9      	str	r1, [r7, #88]	; 0x58
 8005216:	415b      	adcs	r3, r3
 8005218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800521a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800521e:	4621      	mov	r1, r4
 8005220:	eb12 0801 	adds.w	r8, r2, r1
 8005224:	4629      	mov	r1, r5
 8005226:	eb43 0901 	adc.w	r9, r3, r1
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800523a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523e:	4690      	mov	r8, r2
 8005240:	4699      	mov	r9, r3
 8005242:	4623      	mov	r3, r4
 8005244:	eb18 0303 	adds.w	r3, r8, r3
 8005248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800524c:	462b      	mov	r3, r5
 800524e:	eb49 0303 	adc.w	r3, r9, r3
 8005252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005262:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800526a:	460b      	mov	r3, r1
 800526c:	18db      	adds	r3, r3, r3
 800526e:	653b      	str	r3, [r7, #80]	; 0x50
 8005270:	4613      	mov	r3, r2
 8005272:	eb42 0303 	adc.w	r3, r2, r3
 8005276:	657b      	str	r3, [r7, #84]	; 0x54
 8005278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800527c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005280:	f7fa ffa6 	bl	80001d0 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4b61      	ldr	r3, [pc, #388]	; (8005410 <UART_SetConfig+0x2d4>)
 800528a:	fba3 2302 	umull	r2, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	011c      	lsls	r4, r3, #4
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800529c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80052ac:	415b      	adcs	r3, r3
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052b4:	4641      	mov	r1, r8
 80052b6:	eb12 0a01 	adds.w	sl, r2, r1
 80052ba:	4649      	mov	r1, r9
 80052bc:	eb43 0b01 	adc.w	fp, r3, r1
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d4:	4692      	mov	sl, r2
 80052d6:	469b      	mov	fp, r3
 80052d8:	4643      	mov	r3, r8
 80052da:	eb1a 0303 	adds.w	r3, sl, r3
 80052de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052e2:	464b      	mov	r3, r9
 80052e4:	eb4b 0303 	adc.w	r3, fp, r3
 80052e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005300:	460b      	mov	r3, r1
 8005302:	18db      	adds	r3, r3, r3
 8005304:	643b      	str	r3, [r7, #64]	; 0x40
 8005306:	4613      	mov	r3, r2
 8005308:	eb42 0303 	adc.w	r3, r2, r3
 800530c:	647b      	str	r3, [r7, #68]	; 0x44
 800530e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005316:	f7fa ff5b 	bl	80001d0 <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4611      	mov	r1, r2
 8005320:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <UART_SetConfig+0x2d4>)
 8005322:	fba3 2301 	umull	r2, r3, r3, r1
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	2264      	movs	r2, #100	; 0x64
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	1acb      	subs	r3, r1, r3
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005336:	4b36      	ldr	r3, [pc, #216]	; (8005410 <UART_SetConfig+0x2d4>)
 8005338:	fba3 2302 	umull	r2, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005344:	441c      	add	r4, r3
 8005346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005350:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	1891      	adds	r1, r2, r2
 800535e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005360:	415b      	adcs	r3, r3
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005368:	4641      	mov	r1, r8
 800536a:	1851      	adds	r1, r2, r1
 800536c:	6339      	str	r1, [r7, #48]	; 0x30
 800536e:	4649      	mov	r1, r9
 8005370:	414b      	adcs	r3, r1
 8005372:	637b      	str	r3, [r7, #52]	; 0x34
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005380:	4659      	mov	r1, fp
 8005382:	00cb      	lsls	r3, r1, #3
 8005384:	4651      	mov	r1, sl
 8005386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538a:	4651      	mov	r1, sl
 800538c:	00ca      	lsls	r2, r1, #3
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	4603      	mov	r3, r0
 8005394:	4642      	mov	r2, r8
 8005396:	189b      	adds	r3, r3, r2
 8005398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800539c:	464b      	mov	r3, r9
 800539e:	460a      	mov	r2, r1
 80053a0:	eb42 0303 	adc.w	r3, r2, r3
 80053a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053bc:	460b      	mov	r3, r1
 80053be:	18db      	adds	r3, r3, r3
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c2:	4613      	mov	r3, r2
 80053c4:	eb42 0303 	adc.w	r3, r2, r3
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053d2:	f7fa fefd 	bl	80001d0 <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <UART_SetConfig+0x2d4>)
 80053dc:	fba3 1302 	umull	r1, r3, r3, r2
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	2164      	movs	r1, #100	; 0x64
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	3332      	adds	r3, #50	; 0x32
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <UART_SetConfig+0x2d4>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f003 0207 	and.w	r2, r3, #7
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4422      	add	r2, r4
 8005402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005404:	e105      	b.n	8005612 <UART_SetConfig+0x4d6>
 8005406:	bf00      	nop
 8005408:	40011000 	.word	0x40011000
 800540c:	40011400 	.word	0x40011400
 8005410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005418:	2200      	movs	r2, #0
 800541a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800541e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005426:	4642      	mov	r2, r8
 8005428:	464b      	mov	r3, r9
 800542a:	1891      	adds	r1, r2, r2
 800542c:	6239      	str	r1, [r7, #32]
 800542e:	415b      	adcs	r3, r3
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
 8005432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005436:	4641      	mov	r1, r8
 8005438:	1854      	adds	r4, r2, r1
 800543a:	4649      	mov	r1, r9
 800543c:	eb43 0501 	adc.w	r5, r3, r1
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	00eb      	lsls	r3, r5, #3
 800544a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544e:	00e2      	lsls	r2, r4, #3
 8005450:	4614      	mov	r4, r2
 8005452:	461d      	mov	r5, r3
 8005454:	4643      	mov	r3, r8
 8005456:	18e3      	adds	r3, r4, r3
 8005458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800545c:	464b      	mov	r3, r9
 800545e:	eb45 0303 	adc.w	r3, r5, r3
 8005462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005482:	4629      	mov	r1, r5
 8005484:	008b      	lsls	r3, r1, #2
 8005486:	4621      	mov	r1, r4
 8005488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548c:	4621      	mov	r1, r4
 800548e:	008a      	lsls	r2, r1, #2
 8005490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005494:	f7fa fe9c 	bl	80001d0 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4b60      	ldr	r3, [pc, #384]	; (8005620 <UART_SetConfig+0x4e4>)
 800549e:	fba3 2302 	umull	r2, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	011c      	lsls	r4, r3, #4
 80054a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	1891      	adds	r1, r2, r2
 80054be:	61b9      	str	r1, [r7, #24]
 80054c0:	415b      	adcs	r3, r3
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c8:	4641      	mov	r1, r8
 80054ca:	1851      	adds	r1, r2, r1
 80054cc:	6139      	str	r1, [r7, #16]
 80054ce:	4649      	mov	r1, r9
 80054d0:	414b      	adcs	r3, r1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e0:	4659      	mov	r1, fp
 80054e2:	00cb      	lsls	r3, r1, #3
 80054e4:	4651      	mov	r1, sl
 80054e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ea:	4651      	mov	r1, sl
 80054ec:	00ca      	lsls	r2, r1, #3
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	4642      	mov	r2, r8
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054fc:	464b      	mov	r3, r9
 80054fe:	460a      	mov	r2, r1
 8005500:	eb42 0303 	adc.w	r3, r2, r3
 8005504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	67bb      	str	r3, [r7, #120]	; 0x78
 8005512:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005520:	4649      	mov	r1, r9
 8005522:	008b      	lsls	r3, r1, #2
 8005524:	4641      	mov	r1, r8
 8005526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552a:	4641      	mov	r1, r8
 800552c:	008a      	lsls	r2, r1, #2
 800552e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005532:	f7fa fe4d 	bl	80001d0 <__aeabi_uldivmod>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4b39      	ldr	r3, [pc, #228]	; (8005620 <UART_SetConfig+0x4e4>)
 800553c:	fba3 1302 	umull	r1, r3, r3, r2
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	2164      	movs	r1, #100	; 0x64
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	3332      	adds	r3, #50	; 0x32
 800554e:	4a34      	ldr	r2, [pc, #208]	; (8005620 <UART_SetConfig+0x4e4>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800555a:	441c      	add	r4, r3
 800555c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005560:	2200      	movs	r2, #0
 8005562:	673b      	str	r3, [r7, #112]	; 0x70
 8005564:	677a      	str	r2, [r7, #116]	; 0x74
 8005566:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800556a:	4642      	mov	r2, r8
 800556c:	464b      	mov	r3, r9
 800556e:	1891      	adds	r1, r2, r2
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	415b      	adcs	r3, r3
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800557a:	4641      	mov	r1, r8
 800557c:	1851      	adds	r1, r2, r1
 800557e:	6039      	str	r1, [r7, #0]
 8005580:	4649      	mov	r1, r9
 8005582:	414b      	adcs	r3, r1
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005592:	4659      	mov	r1, fp
 8005594:	00cb      	lsls	r3, r1, #3
 8005596:	4651      	mov	r1, sl
 8005598:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559c:	4651      	mov	r1, sl
 800559e:	00ca      	lsls	r2, r1, #3
 80055a0:	4610      	mov	r0, r2
 80055a2:	4619      	mov	r1, r3
 80055a4:	4603      	mov	r3, r0
 80055a6:	4642      	mov	r2, r8
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ac:	464b      	mov	r3, r9
 80055ae:	460a      	mov	r2, r1
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	663b      	str	r3, [r7, #96]	; 0x60
 80055c0:	667a      	str	r2, [r7, #100]	; 0x64
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055ce:	4649      	mov	r1, r9
 80055d0:	008b      	lsls	r3, r1, #2
 80055d2:	4641      	mov	r1, r8
 80055d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d8:	4641      	mov	r1, r8
 80055da:	008a      	lsls	r2, r1, #2
 80055dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055e0:	f7fa fdf6 	bl	80001d0 <__aeabi_uldivmod>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <UART_SetConfig+0x4e4>)
 80055ea:	fba3 1302 	umull	r1, r3, r3, r2
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	2164      	movs	r1, #100	; 0x64
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	3332      	adds	r3, #50	; 0x32
 80055fc:	4a08      	ldr	r2, [pc, #32]	; (8005620 <UART_SetConfig+0x4e4>)
 80055fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4422      	add	r2, r4
 8005610:	609a      	str	r2, [r3, #8]
}
 8005612:	bf00      	nop
 8005614:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005618:	46bd      	mov	sp, r7
 800561a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800561e:	bf00      	nop
 8005620:	51eb851f 	.word	0x51eb851f

08005624 <__NVIC_SetPriority>:
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005634:	2b00      	cmp	r3, #0
 8005636:	db0a      	blt.n	800564e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	b2da      	uxtb	r2, r3
 800563c:	490c      	ldr	r1, [pc, #48]	; (8005670 <__NVIC_SetPriority+0x4c>)
 800563e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005642:	0112      	lsls	r2, r2, #4
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	440b      	add	r3, r1
 8005648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800564c:	e00a      	b.n	8005664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	4908      	ldr	r1, [pc, #32]	; (8005674 <__NVIC_SetPriority+0x50>)
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	3b04      	subs	r3, #4
 800565c:	0112      	lsls	r2, r2, #4
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	440b      	add	r3, r1
 8005662:	761a      	strb	r2, [r3, #24]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	e000e100 	.word	0xe000e100
 8005674:	e000ed00 	.word	0xe000ed00

08005678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800567c:	2100      	movs	r1, #0
 800567e:	f06f 0004 	mvn.w	r0, #4
 8005682:	f7ff ffcf 	bl	8005624 <__NVIC_SetPriority>
#endif
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005692:	f3ef 8305 	mrs	r3, IPSR
 8005696:	603b      	str	r3, [r7, #0]
  return(result);
 8005698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800569e:	f06f 0305 	mvn.w	r3, #5
 80056a2:	607b      	str	r3, [r7, #4]
 80056a4:	e00c      	b.n	80056c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <osKernelInitialize+0x44>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d105      	bne.n	80056ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056ae:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <osKernelInitialize+0x44>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	607b      	str	r3, [r7, #4]
 80056b8:	e002      	b.n	80056c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056c0:	687b      	ldr	r3, [r7, #4]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	200001d0 	.word	0x200001d0

080056d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056da:	f3ef 8305 	mrs	r3, IPSR
 80056de:	603b      	str	r3, [r7, #0]
  return(result);
 80056e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80056e6:	f06f 0305 	mvn.w	r3, #5
 80056ea:	607b      	str	r3, [r7, #4]
 80056ec:	e010      	b.n	8005710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <osKernelStart+0x48>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d109      	bne.n	800570a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056f6:	f7ff ffbf 	bl	8005678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056fa:	4b08      	ldr	r3, [pc, #32]	; (800571c <osKernelStart+0x48>)
 80056fc:	2202      	movs	r2, #2
 80056fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005700:	f000 ff3e 	bl	8006580 <vTaskStartScheduler>
      stat = osOK;
 8005704:	2300      	movs	r3, #0
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	e002      	b.n	8005710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005710:	687b      	ldr	r3, [r7, #4]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	200001d0 	.word	0x200001d0

08005720 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a07      	ldr	r2, [pc, #28]	; (800574c <vApplicationGetIdleTaskMemory+0x2c>)
 8005730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a06      	ldr	r2, [pc, #24]	; (8005750 <vApplicationGetIdleTaskMemory+0x30>)
 8005736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	200001d4 	.word	0x200001d4
 8005750:	20000230 	.word	0x20000230

08005754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a07      	ldr	r2, [pc, #28]	; (8005780 <vApplicationGetTimerTaskMemory+0x2c>)
 8005764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4a06      	ldr	r2, [pc, #24]	; (8005784 <vApplicationGetTimerTaskMemory+0x30>)
 800576a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000430 	.word	0x20000430
 8005784:	2000048c 	.word	0x2000048c

08005788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f103 0208 	add.w	r2, r3, #8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f04f 32ff 	mov.w	r2, #4294967295
 80057a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f103 0208 	add.w	r2, r3, #8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f103 0208 	add.w	r2, r3, #8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
}
 800581e:	bf00      	nop
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d103      	bne.n	800584a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e00c      	b.n	8005864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3308      	adds	r3, #8
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e002      	b.n	8005858 <vListInsert+0x2e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d2f6      	bcs.n	8005852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6892      	ldr	r2, [r2, #8]
 80058b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6852      	ldr	r2, [r2, #4]
 80058bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d103      	bne.n	80058d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800591a:	f001 ffd3 	bl	80078c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	441a      	add	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	3b01      	subs	r3, #1
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	441a      	add	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	22ff      	movs	r2, #255	; 0xff
 800595e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d114      	bne.n	800599a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3310      	adds	r3, #16
 800597c:	4618      	mov	r0, r3
 800597e:	f001 f889 	bl	8006a94 <xTaskRemoveFromEventList>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <xQueueGenericReset+0xcc>)
 800598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	e009      	b.n	80059ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3310      	adds	r3, #16
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fef2 	bl	8005788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3324      	adds	r3, #36	; 0x24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff feed 	bl	8005788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059ae:	f001 ffb9 	bl	8007924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10a      	bne.n	80059ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059e6:	bf00      	nop
 80059e8:	e7fe      	b.n	80059e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <xQueueGenericCreateStatic+0x52>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <xQueueGenericCreateStatic+0x56>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueGenericCreateStatic+0x58>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <xQueueGenericCreateStatic+0x7e>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <xQueueGenericCreateStatic+0x82>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <xQueueGenericCreateStatic+0x84>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	61fb      	str	r3, [r7, #28]
}
 8005a5a:	bf00      	nop
 8005a5c:	e7fe      	b.n	8005a5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a5e:	2350      	movs	r3, #80	; 0x50
 8005a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b50      	cmp	r3, #80	; 0x50
 8005a66:	d00a      	beq.n	8005a7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	61bb      	str	r3, [r7, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00d      	beq.n	8005aa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f805 	bl	8005ab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3730      	adds	r7, #48	; 0x30
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	e002      	b.n	8005ad2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ade:	2101      	movs	r1, #1
 8005ae0:	69b8      	ldr	r0, [r7, #24]
 8005ae2:	f7ff ff05 	bl	80058f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	78fa      	ldrb	r2, [r7, #3]
 8005aea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	; 0x38
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b06:	2300      	movs	r3, #0
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <xQueueGenericSend+0x32>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d103      	bne.n	8005b38 <xQueueGenericSend+0x40>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <xQueueGenericSend+0x44>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <xQueueGenericSend+0x46>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <xQueueGenericSend+0x60>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d103      	bne.n	8005b66 <xQueueGenericSend+0x6e>
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <xQueueGenericSend+0x72>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <xQueueGenericSend+0x74>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	623b      	str	r3, [r7, #32]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b86:	f001 f943 	bl	8006e10 <xTaskGetSchedulerState>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d102      	bne.n	8005b96 <xQueueGenericSend+0x9e>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <xQueueGenericSend+0xa2>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <xQueueGenericSend+0xa4>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	61fb      	str	r3, [r7, #28]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bb6:	f001 fe85 	bl	80078c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d302      	bcc.n	8005bcc <xQueueGenericSend+0xd4>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d129      	bne.n	8005c20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bd2:	f000 fa0b 	bl	8005fec <prvCopyDataToQueue>
 8005bd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	3324      	adds	r3, #36	; 0x24
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 ff55 	bl	8006a94 <xTaskRemoveFromEventList>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005bf0:	4b3f      	ldr	r3, [pc, #252]	; (8005cf0 <xQueueGenericSend+0x1f8>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	e00a      	b.n	8005c18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c08:	4b39      	ldr	r3, [pc, #228]	; (8005cf0 <xQueueGenericSend+0x1f8>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c18:	f001 fe84 	bl	8007924 <vPortExitCritical>
				return pdPASS;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e063      	b.n	8005ce8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c26:	f001 fe7d 	bl	8007924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	e05c      	b.n	8005ce8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c34:	f107 0314 	add.w	r3, r7, #20
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 ff8f 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c42:	f001 fe6f 	bl	8007924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c46:	f000 fd01 	bl	800664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c4a:	f001 fe3b 	bl	80078c4 <vPortEnterCritical>
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d103      	bne.n	8005c64 <xQueueGenericSend+0x16c>
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d103      	bne.n	8005c7a <xQueueGenericSend+0x182>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c7a:	f001 fe53 	bl	8007924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c7e:	1d3a      	adds	r2, r7, #4
 8005c80:	f107 0314 	add.w	r3, r7, #20
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 ff7e 	bl	8006b88 <xTaskCheckForTimeOut>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d124      	bne.n	8005cdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c94:	f000 faa2 	bl	80061dc <prvIsQueueFull>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	3310      	adds	r3, #16
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fea4 	bl	80069f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cae:	f000 fa2d 	bl	800610c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cb2:	f000 fcd9 	bl	8006668 <xTaskResumeAll>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f47f af7c 	bne.w	8005bb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <xQueueGenericSend+0x1f8>)
 8005cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	e772      	b.n	8005bb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cd2:	f000 fa1b 	bl	800610c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cd6:	f000 fcc7 	bl	8006668 <xTaskResumeAll>
 8005cda:	e76c      	b.n	8005bb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cde:	f000 fa15 	bl	800610c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ce2:	f000 fcc1 	bl	8006668 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3738      	adds	r7, #56	; 0x38
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b090      	sub	sp, #64	; 0x40
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d103      	bne.n	8005d30 <xQueueGenericSendFromISR+0x3c>
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <xQueueGenericSendFromISR+0x40>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <xQueueGenericSendFromISR+0x42>
 8005d34:	2300      	movs	r3, #0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d103      	bne.n	8005d5e <xQueueGenericSendFromISR+0x6a>
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <xQueueGenericSendFromISR+0x6e>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <xQueueGenericSendFromISR+0x70>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	623b      	str	r3, [r7, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d7e:	f001 fe83 	bl	8007a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d82:	f3ef 8211 	mrs	r2, BASEPRI
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	61fa      	str	r2, [r7, #28]
 8005d98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d302      	bcc.n	8005db0 <xQueueGenericSendFromISR+0xbc>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d12f      	bne.n	8005e10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dc6:	f000 f911 	bl	8005fec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005dca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d112      	bne.n	8005dfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d016      	beq.n	8005e0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	3324      	adds	r3, #36	; 0x24
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 fe57 	bl	8006a94 <xTaskRemoveFromEventList>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00e      	beq.n	8005e0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	e007      	b.n	8005e0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dfe:	3301      	adds	r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	b25a      	sxtb	r2, r3
 8005e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e0e:	e001      	b.n	8005e14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3740      	adds	r7, #64	; 0x40
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08c      	sub	sp, #48	; 0x30
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <xQueueReceive+0x30>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	623b      	str	r3, [r7, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <xQueueReceive+0x3e>
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <xQueueReceive+0x42>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueReceive+0x44>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xQueueReceive+0x5e>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	61fb      	str	r3, [r7, #28]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e8a:	f000 ffc1 	bl	8006e10 <xTaskGetSchedulerState>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <xQueueReceive+0x6e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <xQueueReceive+0x72>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <xQueueReceive+0x74>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <xQueueReceive+0x8e>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	61bb      	str	r3, [r7, #24]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eba:	f001 fd03 	bl	80078c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01f      	beq.n	8005f0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ece:	f000 f8f7 	bl	80060c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	1e5a      	subs	r2, r3, #1
 8005ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00f      	beq.n	8005f02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	3310      	adds	r3, #16
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fdd4 	bl	8006a94 <xTaskRemoveFromEventList>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ef2:	4b3d      	ldr	r3, [pc, #244]	; (8005fe8 <xQueueReceive+0x1bc>)
 8005ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f02:	f001 fd0f 	bl	8007924 <vPortExitCritical>
				return pdPASS;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e069      	b.n	8005fde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d103      	bne.n	8005f18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f10:	f001 fd08 	bl	8007924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f14:	2300      	movs	r3, #0
 8005f16:	e062      	b.n	8005fde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f1e:	f107 0310 	add.w	r3, r7, #16
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fe1a 	bl	8006b5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f2c:	f001 fcfa 	bl	8007924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f30:	f000 fb8c 	bl	800664c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f34:	f001 fcc6 	bl	80078c4 <vPortEnterCritical>
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f3e:	b25b      	sxtb	r3, r3
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f44:	d103      	bne.n	8005f4e <xQueueReceive+0x122>
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f54:	b25b      	sxtb	r3, r3
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d103      	bne.n	8005f64 <xQueueReceive+0x138>
 8005f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f64:	f001 fcde 	bl	8007924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f68:	1d3a      	adds	r2, r7, #4
 8005f6a:	f107 0310 	add.w	r3, r7, #16
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fe09 	bl	8006b88 <xTaskCheckForTimeOut>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d123      	bne.n	8005fc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f7e:	f000 f917 	bl	80061b0 <prvIsQueueEmpty>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d017      	beq.n	8005fb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	3324      	adds	r3, #36	; 0x24
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fd2f 	bl	80069f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f98:	f000 f8b8 	bl	800610c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f9c:	f000 fb64 	bl	8006668 <xTaskResumeAll>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d189      	bne.n	8005eba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <xQueueReceive+0x1bc>)
 8005fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fac:	601a      	str	r2, [r3, #0]
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	e780      	b.n	8005eba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fba:	f000 f8a7 	bl	800610c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fbe:	f000 fb53 	bl	8006668 <xTaskResumeAll>
 8005fc2:	e77a      	b.n	8005eba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc6:	f000 f8a1 	bl	800610c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fca:	f000 fb4d 	bl	8006668 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd0:	f000 f8ee 	bl	80061b0 <prvIsQueueEmpty>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f43f af6f 	beq.w	8005eba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3730      	adds	r7, #48	; 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d14d      	bne.n	80060ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 ff18 	bl	8006e4c <xTaskPriorityDisinherit>
 800601c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	e043      	b.n	80060ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d119      	bne.n	8006060 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6858      	ldr	r0, [r3, #4]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	461a      	mov	r2, r3
 8006036:	68b9      	ldr	r1, [r7, #8]
 8006038:	f001 fe46 	bl	8007cc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	441a      	add	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	d32b      	bcc.n	80060ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	e026      	b.n	80060ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68d8      	ldr	r0, [r3, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	461a      	mov	r2, r3
 800606a:	68b9      	ldr	r1, [r7, #8]
 800606c:	f001 fe2c 	bl	8007cc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	425b      	negs	r3, r3
 800607a:	441a      	add	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d207      	bcs.n	800609c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	425b      	negs	r3, r3
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d105      	bne.n	80060ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060b6:	697b      	ldr	r3, [r7, #20]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d018      	beq.n	8006104 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	441a      	add	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68da      	ldr	r2, [r3, #12]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d303      	bcc.n	80060f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68d9      	ldr	r1, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	461a      	mov	r2, r3
 80060fe:	6838      	ldr	r0, [r7, #0]
 8006100:	f001 fde2 	bl	8007cc8 <memcpy>
	}
}
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006114:	f001 fbd6 	bl	80078c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800611e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006120:	e011      	b.n	8006146 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d012      	beq.n	8006150 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3324      	adds	r3, #36	; 0x24
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fcb0 	bl	8006a94 <xTaskRemoveFromEventList>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800613a:	f000 fd87 	bl	8006c4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	3b01      	subs	r3, #1
 8006142:	b2db      	uxtb	r3, r3
 8006144:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dce9      	bgt.n	8006122 <prvUnlockQueue+0x16>
 800614e:	e000      	b.n	8006152 <prvUnlockQueue+0x46>
					break;
 8006150:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	22ff      	movs	r2, #255	; 0xff
 8006156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800615a:	f001 fbe3 	bl	8007924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800615e:	f001 fbb1 	bl	80078c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006168:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800616a:	e011      	b.n	8006190 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3310      	adds	r3, #16
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fc8b 	bl	8006a94 <xTaskRemoveFromEventList>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006184:	f000 fd62 	bl	8006c4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006188:	7bbb      	ldrb	r3, [r7, #14]
 800618a:	3b01      	subs	r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	dce9      	bgt.n	800616c <prvUnlockQueue+0x60>
 8006198:	e000      	b.n	800619c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800619a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	22ff      	movs	r2, #255	; 0xff
 80061a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061a4:	f001 fbbe 	bl	8007924 <vPortExitCritical>
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061b8:	f001 fb84 	bl	80078c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061c4:	2301      	movs	r3, #1
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e001      	b.n	80061ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ce:	f001 fba9 	bl	8007924 <vPortExitCritical>

	return xReturn;
 80061d2:	68fb      	ldr	r3, [r7, #12]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061e4:	f001 fb6e 	bl	80078c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d102      	bne.n	80061fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061f4:	2301      	movs	r3, #1
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e001      	b.n	80061fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061fe:	f001 fb91 	bl	8007924 <vPortExitCritical>

	return xReturn;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e014      	b.n	8006246 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800621c:	4a0f      	ldr	r2, [pc, #60]	; (800625c <vQueueAddToRegistry+0x50>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006228:	490c      	ldr	r1, [pc, #48]	; (800625c <vQueueAddToRegistry+0x50>)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006232:	4a0a      	ldr	r2, [pc, #40]	; (800625c <vQueueAddToRegistry+0x50>)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4413      	add	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800623e:	e006      	b.n	800624e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b07      	cmp	r3, #7
 800624a:	d9e7      	bls.n	800621c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	2000088c 	.word	0x2000088c

08006260 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006270:	f001 fb28 	bl	80078c4 <vPortEnterCritical>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800627a:	b25b      	sxtb	r3, r3
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d103      	bne.n	800628a <vQueueWaitForMessageRestricted+0x2a>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006290:	b25b      	sxtb	r3, r3
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d103      	bne.n	80062a0 <vQueueWaitForMessageRestricted+0x40>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062a0:	f001 fb40 	bl	8007924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3324      	adds	r3, #36	; 0x24
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fbc1 	bl	8006a3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062ba:	6978      	ldr	r0, [r7, #20]
 80062bc:	f7ff ff26 	bl	800610c <prvUnlockQueue>
	}
 80062c0:	bf00      	nop
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08e      	sub	sp, #56	; 0x38
 80062cc:	af04      	add	r7, sp, #16
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
}
 80062ee:	bf00      	nop
 80062f0:	e7fe      	b.n	80062f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xTaskCreateStatic+0x46>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	61fb      	str	r3, [r7, #28]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800630e:	235c      	movs	r3, #92	; 0x5c
 8006310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	2b5c      	cmp	r3, #92	; 0x5c
 8006316:	d00a      	beq.n	800632e <xTaskCreateStatic+0x66>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	61bb      	str	r3, [r7, #24]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800632e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01e      	beq.n	8006374 <xTaskCreateStatic+0xac>
 8006336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01b      	beq.n	8006374 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006344:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	2202      	movs	r2, #2
 800634a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800634e:	2300      	movs	r3, #0
 8006350:	9303      	str	r3, [sp, #12]
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	9302      	str	r3, [sp, #8]
 8006356:	f107 0314 	add.w	r3, r7, #20
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f80b 	bl	8006382 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800636c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800636e:	f000 f897 	bl	80064a0 <prvAddNewTaskToReadyList>
 8006372:	e001      	b.n	8006378 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006378:	697b      	ldr	r3, [r7, #20]
	}
 800637a:	4618      	mov	r0, r3
 800637c:	3728      	adds	r7, #40	; 0x28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b088      	sub	sp, #32
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	461a      	mov	r2, r3
 800639a:	21a5      	movs	r1, #165	; 0xa5
 800639c:	f001 fca2 	bl	8007ce4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063aa:	3b01      	subs	r3, #1
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f023 0307 	bic.w	r3, r3, #7
 80063b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <prvInitialiseNewTask+0x58>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	617b      	str	r3, [r7, #20]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01f      	beq.n	8006420 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	e012      	b.n	800640c <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	7819      	ldrb	r1, [r3, #0]
 80063ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	3334      	adds	r3, #52	; 0x34
 80063f6:	460a      	mov	r2, r1
 80063f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d006      	beq.n	8006414 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3301      	adds	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b0f      	cmp	r3, #15
 8006410:	d9e9      	bls.n	80063e6 <prvInitialiseNewTask+0x64>
 8006412:	e000      	b.n	8006416 <prvInitialiseNewTask+0x94>
			{
				break;
 8006414:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800641e:	e003      	b.n	8006428 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	2b37      	cmp	r3, #55	; 0x37
 800642c:	d901      	bls.n	8006432 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800642e:	2337      	movs	r3, #55	; 0x37
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006436:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800643c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2200      	movs	r2, #0
 8006442:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	3304      	adds	r3, #4
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff f9bd 	bl	80057c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	3318      	adds	r3, #24
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff f9b8 	bl	80057c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2200      	movs	r2, #0
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	69b8      	ldr	r0, [r7, #24]
 8006482:	f001 f8f3 	bl	800766c <pxPortInitialiseStack>
 8006486:	4602      	mov	r2, r0
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006498:	bf00      	nop
 800649a:	3720      	adds	r7, #32
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064a8:	f001 fa0c 	bl	80078c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064ac:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064b6:	4b2c      	ldr	r3, [pc, #176]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064be:	4a2a      	ldr	r2, [pc, #168]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c4:	4b27      	ldr	r3, [pc, #156]	; (8006564 <prvAddNewTaskToReadyList+0xc4>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d110      	bne.n	80064ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064cc:	f000 fbe2 	bl	8006c94 <prvInitialiseTaskLists>
 80064d0:	e00d      	b.n	80064ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064d2:	4b26      	ldr	r3, [pc, #152]	; (800656c <prvAddNewTaskToReadyList+0xcc>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d109      	bne.n	80064ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064da:	4b23      	ldr	r3, [pc, #140]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d802      	bhi.n	80064ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064e8:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ee:	4b20      	ldr	r3, [pc, #128]	; (8006570 <prvAddNewTaskToReadyList+0xd0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a1e      	ldr	r2, [pc, #120]	; (8006570 <prvAddNewTaskToReadyList+0xd0>)
 80064f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <prvAddNewTaskToReadyList+0xd0>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <prvAddNewTaskToReadyList+0xd4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d903      	bls.n	8006514 <prvAddNewTaskToReadyList+0x74>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	4a18      	ldr	r2, [pc, #96]	; (8006574 <prvAddNewTaskToReadyList+0xd4>)
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4a15      	ldr	r2, [pc, #84]	; (8006578 <prvAddNewTaskToReadyList+0xd8>)
 8006522:	441a      	add	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3304      	adds	r3, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f7ff f959 	bl	80057e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006530:	f001 f9f8 	bl	8007924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <prvAddNewTaskToReadyList+0xcc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <prvAddNewTaskToReadyList+0xc8>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	429a      	cmp	r2, r3
 8006548:	d207      	bcs.n	800655a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800654a:	4b0c      	ldr	r3, [pc, #48]	; (800657c <prvAddNewTaskToReadyList+0xdc>)
 800654c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000da0 	.word	0x20000da0
 8006568:	200008cc 	.word	0x200008cc
 800656c:	20000dac 	.word	0x20000dac
 8006570:	20000dbc 	.word	0x20000dbc
 8006574:	20000da8 	.word	0x20000da8
 8006578:	200008d0 	.word	0x200008d0
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800658e:	463a      	mov	r2, r7
 8006590:	1d39      	adds	r1, r7, #4
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff f8c2 	bl	8005720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	9202      	str	r2, [sp, #8]
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	2300      	movs	r3, #0
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	460a      	mov	r2, r1
 80065ae:	4921      	ldr	r1, [pc, #132]	; (8006634 <vTaskStartScheduler+0xb4>)
 80065b0:	4821      	ldr	r0, [pc, #132]	; (8006638 <vTaskStartScheduler+0xb8>)
 80065b2:	f7ff fe89 	bl	80062c8 <xTaskCreateStatic>
 80065b6:	4603      	mov	r3, r0
 80065b8:	4a20      	ldr	r2, [pc, #128]	; (800663c <vTaskStartScheduler+0xbc>)
 80065ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065bc:	4b1f      	ldr	r3, [pc, #124]	; (800663c <vTaskStartScheduler+0xbc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e001      	b.n	80065ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d102      	bne.n	80065da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065d4:	f000 fcfc 	bl	8006fd0 <xTimerCreateTimerTask>
 80065d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d116      	bne.n	800660e <vTaskStartScheduler+0x8e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
}
 80065f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <vTaskStartScheduler+0xc0>)
 80065f6:	f04f 32ff 	mov.w	r2, #4294967295
 80065fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065fc:	4b11      	ldr	r3, [pc, #68]	; (8006644 <vTaskStartScheduler+0xc4>)
 80065fe:	2201      	movs	r2, #1
 8006600:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <vTaskStartScheduler+0xc8>)
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006608:	f001 f8ba 	bl	8007780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800660c:	e00e      	b.n	800662c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d10a      	bne.n	800662c <vTaskStartScheduler+0xac>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	60fb      	str	r3, [r7, #12]
}
 8006628:	bf00      	nop
 800662a:	e7fe      	b.n	800662a <vTaskStartScheduler+0xaa>
}
 800662c:	bf00      	nop
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	08007d0c 	.word	0x08007d0c
 8006638:	08006c65 	.word	0x08006c65
 800663c:	20000dc4 	.word	0x20000dc4
 8006640:	20000dc0 	.word	0x20000dc0
 8006644:	20000dac 	.word	0x20000dac
 8006648:	20000da4 	.word	0x20000da4

0800664c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <vTaskSuspendAll+0x18>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3301      	adds	r3, #1
 8006656:	4a03      	ldr	r2, [pc, #12]	; (8006664 <vTaskSuspendAll+0x18>)
 8006658:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	20000dc8 	.word	0x20000dc8

08006668 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006676:	4b42      	ldr	r3, [pc, #264]	; (8006780 <xTaskResumeAll+0x118>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <xTaskResumeAll+0x2c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	603b      	str	r3, [r7, #0]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006694:	f001 f916 	bl	80078c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006698:	4b39      	ldr	r3, [pc, #228]	; (8006780 <xTaskResumeAll+0x118>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3b01      	subs	r3, #1
 800669e:	4a38      	ldr	r2, [pc, #224]	; (8006780 <xTaskResumeAll+0x118>)
 80066a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a2:	4b37      	ldr	r3, [pc, #220]	; (8006780 <xTaskResumeAll+0x118>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d162      	bne.n	8006770 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066aa:	4b36      	ldr	r3, [pc, #216]	; (8006784 <xTaskResumeAll+0x11c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d05e      	beq.n	8006770 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b2:	e02f      	b.n	8006714 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b4:	4b34      	ldr	r3, [pc, #208]	; (8006788 <xTaskResumeAll+0x120>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3318      	adds	r3, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff f8eb 	bl	800589c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff f8e6 	bl	800589c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d4:	4b2d      	ldr	r3, [pc, #180]	; (800678c <xTaskResumeAll+0x124>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d903      	bls.n	80066e4 <xTaskResumeAll+0x7c>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4a2a      	ldr	r2, [pc, #168]	; (800678c <xTaskResumeAll+0x124>)
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <xTaskResumeAll+0x128>)
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f7ff f871 	bl	80057e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4b23      	ldr	r3, [pc, #140]	; (8006794 <xTaskResumeAll+0x12c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	429a      	cmp	r2, r3
 800670c:	d302      	bcc.n	8006714 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800670e:	4b22      	ldr	r3, [pc, #136]	; (8006798 <xTaskResumeAll+0x130>)
 8006710:	2201      	movs	r2, #1
 8006712:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <xTaskResumeAll+0x120>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1cb      	bne.n	80066b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006722:	f000 fb55 	bl	8006dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006726:	4b1d      	ldr	r3, [pc, #116]	; (800679c <xTaskResumeAll+0x134>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d010      	beq.n	8006754 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006732:	f000 f847 	bl	80067c4 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800673c:	4b16      	ldr	r3, [pc, #88]	; (8006798 <xTaskResumeAll+0x130>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3b01      	subs	r3, #1
 8006746:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800674e:	4b13      	ldr	r3, [pc, #76]	; (800679c <xTaskResumeAll+0x134>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006754:	4b10      	ldr	r3, [pc, #64]	; (8006798 <xTaskResumeAll+0x130>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800675c:	2301      	movs	r3, #1
 800675e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <xTaskResumeAll+0x138>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006770:	f001 f8d8 	bl	8007924 <vPortExitCritical>

	return xAlreadyYielded;
 8006774:	68bb      	ldr	r3, [r7, #8]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000dc8 	.word	0x20000dc8
 8006784:	20000da0 	.word	0x20000da0
 8006788:	20000d60 	.word	0x20000d60
 800678c:	20000da8 	.word	0x20000da8
 8006790:	200008d0 	.word	0x200008d0
 8006794:	200008cc 	.word	0x200008cc
 8006798:	20000db4 	.word	0x20000db4
 800679c:	20000db0 	.word	0x20000db0
 80067a0:	e000ed04 	.word	0xe000ed04

080067a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <xTaskGetTickCount+0x1c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067b0:	687b      	ldr	r3, [r7, #4]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	20000da4 	.word	0x20000da4

080067c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ce:	4b4f      	ldr	r3, [pc, #316]	; (800690c <xTaskIncrementTick+0x148>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f040 808f 	bne.w	80068f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067d8:	4b4d      	ldr	r3, [pc, #308]	; (8006910 <xTaskIncrementTick+0x14c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067e0:	4a4b      	ldr	r2, [pc, #300]	; (8006910 <xTaskIncrementTick+0x14c>)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d120      	bne.n	800682e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80067ec:	4b49      	ldr	r3, [pc, #292]	; (8006914 <xTaskIncrementTick+0x150>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <xTaskIncrementTick+0x48>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	603b      	str	r3, [r7, #0]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <xTaskIncrementTick+0x46>
 800680c:	4b41      	ldr	r3, [pc, #260]	; (8006914 <xTaskIncrementTick+0x150>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	4b41      	ldr	r3, [pc, #260]	; (8006918 <xTaskIncrementTick+0x154>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a3f      	ldr	r2, [pc, #252]	; (8006914 <xTaskIncrementTick+0x150>)
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	4a3f      	ldr	r2, [pc, #252]	; (8006918 <xTaskIncrementTick+0x154>)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	4b3e      	ldr	r3, [pc, #248]	; (800691c <xTaskIncrementTick+0x158>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3301      	adds	r3, #1
 8006826:	4a3d      	ldr	r2, [pc, #244]	; (800691c <xTaskIncrementTick+0x158>)
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	f000 fad1 	bl	8006dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800682e:	4b3c      	ldr	r3, [pc, #240]	; (8006920 <xTaskIncrementTick+0x15c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	d349      	bcc.n	80068cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006838:	4b36      	ldr	r3, [pc, #216]	; (8006914 <xTaskIncrementTick+0x150>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006842:	4b37      	ldr	r3, [pc, #220]	; (8006920 <xTaskIncrementTick+0x15c>)
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	601a      	str	r2, [r3, #0]
					break;
 800684a:	e03f      	b.n	80068cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800684c:	4b31      	ldr	r3, [pc, #196]	; (8006914 <xTaskIncrementTick+0x150>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d203      	bcs.n	800686c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006864:	4a2e      	ldr	r2, [pc, #184]	; (8006920 <xTaskIncrementTick+0x15c>)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800686a:	e02f      	b.n	80068cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff f813 	bl	800589c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	3318      	adds	r3, #24
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f80a 	bl	800589c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688c:	4b25      	ldr	r3, [pc, #148]	; (8006924 <xTaskIncrementTick+0x160>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <xTaskIncrementTick+0xd8>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a22      	ldr	r2, [pc, #136]	; (8006924 <xTaskIncrementTick+0x160>)
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <xTaskIncrementTick+0x164>)
 80068aa:	441a      	add	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe ff95 	bl	80057e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <xTaskIncrementTick+0x168>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d3b8      	bcc.n	8006838 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ca:	e7b5      	b.n	8006838 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068cc:	4b17      	ldr	r3, [pc, #92]	; (800692c <xTaskIncrementTick+0x168>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d2:	4915      	ldr	r1, [pc, #84]	; (8006928 <xTaskIncrementTick+0x164>)
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d901      	bls.n	80068e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <xTaskIncrementTick+0x16c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d007      	beq.n	8006900 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068f0:	2301      	movs	r3, #1
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e004      	b.n	8006900 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068f6:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <xTaskIncrementTick+0x170>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3301      	adds	r3, #1
 80068fc:	4a0d      	ldr	r2, [pc, #52]	; (8006934 <xTaskIncrementTick+0x170>)
 80068fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006900:	697b      	ldr	r3, [r7, #20]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000dc8 	.word	0x20000dc8
 8006910:	20000da4 	.word	0x20000da4
 8006914:	20000d58 	.word	0x20000d58
 8006918:	20000d5c 	.word	0x20000d5c
 800691c:	20000db8 	.word	0x20000db8
 8006920:	20000dc0 	.word	0x20000dc0
 8006924:	20000da8 	.word	0x20000da8
 8006928:	200008d0 	.word	0x200008d0
 800692c:	200008cc 	.word	0x200008cc
 8006930:	20000db4 	.word	0x20000db4
 8006934:	20000db0 	.word	0x20000db0

08006938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800693e:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <vTaskSwitchContext+0xa8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006946:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <vTaskSwitchContext+0xac>)
 8006948:	2201      	movs	r2, #1
 800694a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800694c:	e041      	b.n	80069d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800694e:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <vTaskSwitchContext+0xac>)
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006954:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <vTaskSwitchContext+0xb0>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e010      	b.n	800697e <vTaskSwitchContext+0x46>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10a      	bne.n	8006978 <vTaskSwitchContext+0x40>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	607b      	str	r3, [r7, #4]
}
 8006974:	bf00      	nop
 8006976:	e7fe      	b.n	8006976 <vTaskSwitchContext+0x3e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3b01      	subs	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	491b      	ldr	r1, [pc, #108]	; (80069ec <vTaskSwitchContext+0xb4>)
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0e4      	beq.n	800695c <vTaskSwitchContext+0x24>
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <vTaskSwitchContext+0xb4>)
 800699e:	4413      	add	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	605a      	str	r2, [r3, #4]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3308      	adds	r3, #8
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d104      	bne.n	80069c2 <vTaskSwitchContext+0x8a>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <vTaskSwitchContext+0xb8>)
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4a06      	ldr	r2, [pc, #24]	; (80069e8 <vTaskSwitchContext+0xb0>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6013      	str	r3, [r2, #0]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000dc8 	.word	0x20000dc8
 80069e4:	20000db4 	.word	0x20000db4
 80069e8:	20000da8 	.word	0x20000da8
 80069ec:	200008d0 	.word	0x200008d0
 80069f0:	200008cc 	.word	0x200008cc

080069f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a1a:	4b07      	ldr	r3, [pc, #28]	; (8006a38 <vTaskPlaceOnEventList+0x44>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3318      	adds	r3, #24
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fe ff01 	bl	800582a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a28:	2101      	movs	r1, #1
 8006a2a:	6838      	ldr	r0, [r7, #0]
 8006a2c:	f000 fa7c 	bl	8006f28 <prvAddCurrentTaskToDelayedList>
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	200008cc 	.word	0x200008cc

08006a3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10a      	bne.n	8006a64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	617b      	str	r3, [r7, #20]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a64:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3318      	adds	r3, #24
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7fe feb8 	bl	80057e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a78:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	68b8      	ldr	r0, [r7, #8]
 8006a82:	f000 fa51 	bl	8006f28 <prvAddCurrentTaskToDelayedList>
	}
 8006a86:	bf00      	nop
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	200008cc 	.word	0x200008cc

08006a94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10a      	bne.n	8006ac0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	60fb      	str	r3, [r7, #12]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fee9 	bl	800589c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aca:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <xTaskRemoveFromEventList+0xb0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11d      	bne.n	8006b0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fee0 	bl	800589c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	4b19      	ldr	r3, [pc, #100]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d903      	bls.n	8006af0 <xTaskRemoveFromEventList+0x5c>
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a16      	ldr	r2, [pc, #88]	; (8006b48 <xTaskRemoveFromEventList+0xb4>)
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <xTaskRemoveFromEventList+0xb8>)
 8006afe:	441a      	add	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe fe6b 	bl	80057e2 <vListInsertEnd>
 8006b0c:	e005      	b.n	8006b1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3318      	adds	r3, #24
 8006b12:	4619      	mov	r1, r3
 8006b14:	480e      	ldr	r0, [pc, #56]	; (8006b50 <xTaskRemoveFromEventList+0xbc>)
 8006b16:	f7fe fe64 	bl	80057e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <xTaskRemoveFromEventList+0xc0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d905      	bls.n	8006b34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <xTaskRemoveFromEventList+0xc4>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e001      	b.n	8006b38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b38:	697b      	ldr	r3, [r7, #20]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000dc8 	.word	0x20000dc8
 8006b48:	20000da8 	.word	0x20000da8
 8006b4c:	200008d0 	.word	0x200008d0
 8006b50:	20000d60 	.word	0x20000d60
 8006b54:	200008cc 	.word	0x200008cc
 8006b58:	20000db4 	.word	0x20000db4

08006b5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <vTaskInternalSetTimeOutState+0x24>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <vTaskInternalSetTimeOutState+0x28>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	605a      	str	r2, [r3, #4]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20000db8 	.word	0x20000db8
 8006b84:	20000da4 	.word	0x20000da4

08006b88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	613b      	str	r3, [r7, #16]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	60fb      	str	r3, [r7, #12]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006bca:	f000 fe7b 	bl	80078c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bce:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <xTaskCheckForTimeOut+0xbc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d102      	bne.n	8006bee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e023      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <xTaskCheckForTimeOut+0xc0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d007      	beq.n	8006c0a <xTaskCheckForTimeOut+0x82>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c04:	2301      	movs	r3, #1
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	e015      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d20b      	bcs.n	8006c2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff ff9b 	bl	8006b5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	e004      	b.n	8006c36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c32:	2301      	movs	r3, #1
 8006c34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c36:	f000 fe75 	bl	8007924 <vPortExitCritical>

	return xReturn;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3720      	adds	r7, #32
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000da4 	.word	0x20000da4
 8006c48:	20000db8 	.word	0x20000db8

08006c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c50:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <vTaskMissedYield+0x14>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	bf00      	nop
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	20000db4 	.word	0x20000db4

08006c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c6c:	f000 f852 	bl	8006d14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <prvIdleTask+0x28>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d9f9      	bls.n	8006c6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c78:	4b05      	ldr	r3, [pc, #20]	; (8006c90 <prvIdleTask+0x2c>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c88:	e7f0      	b.n	8006c6c <prvIdleTask+0x8>
 8006c8a:	bf00      	nop
 8006c8c:	200008d0 	.word	0x200008d0
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	e00c      	b.n	8006cba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <prvInitialiseTaskLists+0x60>)
 8006cac:	4413      	add	r3, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fd6a 	bl	8005788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b37      	cmp	r3, #55	; 0x37
 8006cbe:	d9ef      	bls.n	8006ca0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cc0:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006cc2:	f7fe fd61 	bl	8005788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cc6:	480d      	ldr	r0, [pc, #52]	; (8006cfc <prvInitialiseTaskLists+0x68>)
 8006cc8:	f7fe fd5e 	bl	8005788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ccc:	480c      	ldr	r0, [pc, #48]	; (8006d00 <prvInitialiseTaskLists+0x6c>)
 8006cce:	f7fe fd5b 	bl	8005788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cd2:	480c      	ldr	r0, [pc, #48]	; (8006d04 <prvInitialiseTaskLists+0x70>)
 8006cd4:	f7fe fd58 	bl	8005788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cd8:	480b      	ldr	r0, [pc, #44]	; (8006d08 <prvInitialiseTaskLists+0x74>)
 8006cda:	f7fe fd55 	bl	8005788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cde:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <prvInitialiseTaskLists+0x78>)
 8006ce0:	4a05      	ldr	r2, [pc, #20]	; (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006ce2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <prvInitialiseTaskLists+0x7c>)
 8006ce6:	4a05      	ldr	r2, [pc, #20]	; (8006cfc <prvInitialiseTaskLists+0x68>)
 8006ce8:	601a      	str	r2, [r3, #0]
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	200008d0 	.word	0x200008d0
 8006cf8:	20000d30 	.word	0x20000d30
 8006cfc:	20000d44 	.word	0x20000d44
 8006d00:	20000d60 	.word	0x20000d60
 8006d04:	20000d74 	.word	0x20000d74
 8006d08:	20000d8c 	.word	0x20000d8c
 8006d0c:	20000d58 	.word	0x20000d58
 8006d10:	20000d5c 	.word	0x20000d5c

08006d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d1a:	e019      	b.n	8006d50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d1c:	f000 fdd2 	bl	80078c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d20:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <prvCheckTasksWaitingTermination+0x50>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fdb5 	bl	800589c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d32:	4b0d      	ldr	r3, [pc, #52]	; (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	4a0b      	ldr	r2, [pc, #44]	; (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d46:	f000 fded 	bl	8007924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f810 	bl	8006d70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e1      	bne.n	8006d1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000d74 	.word	0x20000d74
 8006d68:	20000da0 	.word	0x20000da0
 8006d6c:	20000d88 	.word	0x20000d88

08006d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d108      	bne.n	8006d94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 febe 	bl	8007b08 <vPortFree>
				vPortFree( pxTCB );
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 febb 	bl	8007b08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d92:	e018      	b.n	8006dc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d103      	bne.n	8006da6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 feb2 	bl	8007b08 <vPortFree>
	}
 8006da4:	e00f      	b.n	8006dc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d00a      	beq.n	8006dc6 <prvDeleteTCB+0x56>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <prvDeleteTCB+0x54>
	}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
	...

08006dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd6:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <prvResetNextTaskUnblockTime+0x38>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <prvResetNextTaskUnblockTime+0x3c>)
 8006de2:	f04f 32ff 	mov.w	r2, #4294967295
 8006de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006de8:	e008      	b.n	8006dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dea:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <prvResetNextTaskUnblockTime+0x38>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <prvResetNextTaskUnblockTime+0x3c>)
 8006dfa:	6013      	str	r3, [r2, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	20000d58 	.word	0x20000d58
 8006e0c:	20000dc0 	.word	0x20000dc0

08006e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <xTaskGetSchedulerState+0x34>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	607b      	str	r3, [r7, #4]
 8006e22:	e008      	b.n	8006e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e24:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <xTaskGetSchedulerState+0x38>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	607b      	str	r3, [r7, #4]
 8006e30:	e001      	b.n	8006e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e36:	687b      	ldr	r3, [r7, #4]
	}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20000dac 	.word	0x20000dac
 8006e48:	20000dc8 	.word	0x20000dc8

08006e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d056      	beq.n	8006f10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e62:	4b2e      	ldr	r3, [pc, #184]	; (8006f1c <xTaskPriorityDisinherit+0xd0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d00a      	beq.n	8006e82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60fb      	str	r3, [r7, #12]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	60bb      	str	r3, [r7, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	e7fe      	b.n	8006e9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	1e5a      	subs	r2, r3, #1
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d02c      	beq.n	8006f10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d128      	bne.n	8006f10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fcea 	bl	800589c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	; (8006f20 <xTaskPriorityDisinherit+0xd4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d903      	bls.n	8006ef0 <xTaskPriorityDisinherit+0xa4>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <xTaskPriorityDisinherit+0xd4>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <xTaskPriorityDisinherit+0xd8>)
 8006efe:	441a      	add	r2, r3
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7fe fc6b 	bl	80057e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f10:	697b      	ldr	r3, [r7, #20]
	}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200008cc 	.word	0x200008cc
 8006f20:	20000da8 	.word	0x20000da8
 8006f24:	200008d0 	.word	0x200008d0

08006f28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f32:	4b21      	ldr	r3, [pc, #132]	; (8006fb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f38:	4b20      	ldr	r3, [pc, #128]	; (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fcac 	bl	800589c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f4a:	d10a      	bne.n	8006f62 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f52:	4b1a      	ldr	r3, [pc, #104]	; (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4819      	ldr	r0, [pc, #100]	; (8006fc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f5c:	f7fe fc41 	bl	80057e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f60:	e026      	b.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d209      	bcs.n	8006f8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7a:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	4610      	mov	r0, r2
 8006f88:	f7fe fc4f 	bl	800582a <vListInsert>
}
 8006f8c:	e010      	b.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f8e:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	f7fe fc45 	bl	800582a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d202      	bcs.n	8006fb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006faa:	4a08      	ldr	r2, [pc, #32]	; (8006fcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6013      	str	r3, [r2, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000da4 	.word	0x20000da4
 8006fbc:	200008cc 	.word	0x200008cc
 8006fc0:	20000d8c 	.word	0x20000d8c
 8006fc4:	20000d5c 	.word	0x20000d5c
 8006fc8:	20000d58 	.word	0x20000d58
 8006fcc:	20000dc0 	.word	0x20000dc0

08006fd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	; 0x28
 8006fd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fda:	f000 fb07 	bl	80075ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fde:	4b1c      	ldr	r3, [pc, #112]	; (8007050 <xTimerCreateTimerTask+0x80>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d021      	beq.n	800702a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fee:	1d3a      	adds	r2, r7, #4
 8006ff0:	f107 0108 	add.w	r1, r7, #8
 8006ff4:	f107 030c 	add.w	r3, r7, #12
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe fbab 	bl	8005754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	9202      	str	r2, [sp, #8]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	2302      	movs	r3, #2
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	460a      	mov	r2, r1
 8007010:	4910      	ldr	r1, [pc, #64]	; (8007054 <xTimerCreateTimerTask+0x84>)
 8007012:	4811      	ldr	r0, [pc, #68]	; (8007058 <xTimerCreateTimerTask+0x88>)
 8007014:	f7ff f958 	bl	80062c8 <xTaskCreateStatic>
 8007018:	4603      	mov	r3, r0
 800701a:	4a10      	ldr	r2, [pc, #64]	; (800705c <xTimerCreateTimerTask+0x8c>)
 800701c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <xTimerCreateTimerTask+0x8c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007026:	2301      	movs	r3, #1
 8007028:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007046:	697b      	ldr	r3, [r7, #20]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000dfc 	.word	0x20000dfc
 8007054:	08007d14 	.word	0x08007d14
 8007058:	08007195 	.word	0x08007195
 800705c:	20000e00 	.word	0x20000e00

08007060 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	; 0x28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800706e:	2300      	movs	r3, #0
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	623b      	str	r3, [r7, #32]
}
 800708a:	bf00      	nop
 800708c:	e7fe      	b.n	800708c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800708e:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <xTimerGenericCommand+0x98>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d02a      	beq.n	80070ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b05      	cmp	r3, #5
 80070a6:	dc18      	bgt.n	80070da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070a8:	f7ff feb2 	bl	8006e10 <xTaskGetSchedulerState>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d109      	bne.n	80070c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070b2:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <xTimerGenericCommand+0x98>)
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	f107 0110 	add.w	r1, r7, #16
 80070ba:	2300      	movs	r3, #0
 80070bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070be:	f7fe fd1b 	bl	8005af8 <xQueueGenericSend>
 80070c2:	6278      	str	r0, [r7, #36]	; 0x24
 80070c4:	e012      	b.n	80070ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <xTimerGenericCommand+0x98>)
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	f107 0110 	add.w	r1, r7, #16
 80070ce:	2300      	movs	r3, #0
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7fe fd11 	bl	8005af8 <xQueueGenericSend>
 80070d6:	6278      	str	r0, [r7, #36]	; 0x24
 80070d8:	e008      	b.n	80070ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070da:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <xTimerGenericCommand+0x98>)
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	f107 0110 	add.w	r1, r7, #16
 80070e2:	2300      	movs	r3, #0
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	f7fe fe05 	bl	8005cf4 <xQueueGenericSendFromISR>
 80070ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3728      	adds	r7, #40	; 0x28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000dfc 	.word	0x20000dfc

080070fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af02      	add	r7, sp, #8
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007106:	4b22      	ldr	r3, [pc, #136]	; (8007190 <prvProcessExpiredTimer+0x94>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3304      	adds	r3, #4
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe fbc1 	bl	800589c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	d022      	beq.n	800716e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	18d1      	adds	r1, r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	6978      	ldr	r0, [r7, #20]
 8007136:	f000 f8d1 	bl	80072dc <prvInsertTimerInActiveList>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01f      	beq.n	8007180 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007140:	2300      	movs	r3, #0
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	2300      	movs	r3, #0
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	2100      	movs	r1, #0
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	f7ff ff88 	bl	8007060 <xTimerGenericCommand>
 8007150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d113      	bne.n	8007180 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	60fb      	str	r3, [r7, #12]
}
 800716a:	bf00      	nop
 800716c:	e7fe      	b.n	800716c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	b2da      	uxtb	r2, r3
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	6978      	ldr	r0, [r7, #20]
 8007186:	4798      	blx	r3
}
 8007188:	bf00      	nop
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000df4 	.word	0x20000df4

08007194 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800719c:	f107 0308 	add.w	r3, r7, #8
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 f857 	bl	8007254 <prvGetNextExpireTime>
 80071a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4619      	mov	r1, r3
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f803 	bl	80071b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071b2:	f000 f8d5 	bl	8007360 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071b6:	e7f1      	b.n	800719c <prvTimerTask+0x8>

080071b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071c2:	f7ff fa43 	bl	800664c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071c6:	f107 0308 	add.w	r3, r7, #8
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f866 	bl	800729c <prvSampleTimeNow>
 80071d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d130      	bne.n	800723a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <prvProcessTimerOrBlockTask+0x3c>
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d806      	bhi.n	80071f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071e6:	f7ff fa3f 	bl	8006668 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071ea:	68f9      	ldr	r1, [r7, #12]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff ff85 	bl	80070fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071f2:	e024      	b.n	800723e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d008      	beq.n	800720c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80071fa:	4b13      	ldr	r3, [pc, #76]	; (8007248 <prvProcessTimerOrBlockTask+0x90>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <prvProcessTimerOrBlockTask+0x50>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <prvProcessTimerOrBlockTask+0x52>
 8007208:	2300      	movs	r3, #0
 800720a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800720c:	4b0f      	ldr	r3, [pc, #60]	; (800724c <prvProcessTimerOrBlockTask+0x94>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	f7ff f821 	bl	8006260 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800721e:	f7ff fa23 	bl	8006668 <xTaskResumeAll>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <prvProcessTimerOrBlockTask+0x98>)
 800722a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	f3bf 8f6f 	isb	sy
}
 8007238:	e001      	b.n	800723e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800723a:	f7ff fa15 	bl	8006668 <xTaskResumeAll>
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000df8 	.word	0x20000df8
 800724c:	20000dfc 	.word	0x20000dfc
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800725c:	4b0e      	ldr	r3, [pc, #56]	; (8007298 <prvGetNextExpireTime+0x44>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <prvGetNextExpireTime+0x16>
 8007266:	2201      	movs	r2, #1
 8007268:	e000      	b.n	800726c <prvGetNextExpireTime+0x18>
 800726a:	2200      	movs	r2, #0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d105      	bne.n	8007284 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007278:	4b07      	ldr	r3, [pc, #28]	; (8007298 <prvGetNextExpireTime+0x44>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	e001      	b.n	8007288 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	20000df4 	.word	0x20000df4

0800729c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072a4:	f7ff fa7e 	bl	80067a4 <xTaskGetTickCount>
 80072a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <prvSampleTimeNow+0x3c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d205      	bcs.n	80072c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072b4:	f000 f936 	bl	8007524 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072c6:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <prvSampleTimeNow+0x3c>)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072cc:	68fb      	ldr	r3, [r7, #12]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20000e04 	.word	0x20000e04

080072dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d812      	bhi.n	8007328 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	429a      	cmp	r2, r3
 800730e:	d302      	bcc.n	8007316 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007310:	2301      	movs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e01b      	b.n	800734e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007316:	4b10      	ldr	r3, [pc, #64]	; (8007358 <prvInsertTimerInActiveList+0x7c>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3304      	adds	r3, #4
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f7fe fa82 	bl	800582a <vListInsert>
 8007326:	e012      	b.n	800734e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	429a      	cmp	r2, r3
 800732e:	d206      	bcs.n	800733e <prvInsertTimerInActiveList+0x62>
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d302      	bcc.n	800733e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007338:	2301      	movs	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e007      	b.n	800734e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800733e:	4b07      	ldr	r3, [pc, #28]	; (800735c <prvInsertTimerInActiveList+0x80>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3304      	adds	r3, #4
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f7fe fa6e 	bl	800582a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800734e:	697b      	ldr	r3, [r7, #20]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20000df8 	.word	0x20000df8
 800735c:	20000df4 	.word	0x20000df4

08007360 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08e      	sub	sp, #56	; 0x38
 8007364:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007366:	e0ca      	b.n	80074fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	da18      	bge.n	80073a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	3304      	adds	r3, #4
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10a      	bne.n	8007390 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	61fb      	str	r3, [r7, #28]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007396:	6850      	ldr	r0, [r2, #4]
 8007398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800739a:	6892      	ldr	r2, [r2, #8]
 800739c:	4611      	mov	r1, r2
 800739e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f2c0 80aa 	blt.w	80074fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d004      	beq.n	80073be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	3304      	adds	r3, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fa6f 	bl	800589c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073be:	463b      	mov	r3, r7
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff ff6b 	bl	800729c <prvSampleTimeNow>
 80073c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b09      	cmp	r3, #9
 80073cc:	f200 8097 	bhi.w	80074fe <prvProcessReceivedCommands+0x19e>
 80073d0:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <prvProcessReceivedCommands+0x78>)
 80073d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d6:	bf00      	nop
 80073d8:	08007401 	.word	0x08007401
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007401 	.word	0x08007401
 80073e4:	08007475 	.word	0x08007475
 80073e8:	08007489 	.word	0x08007489
 80073ec:	080074d3 	.word	0x080074d3
 80073f0:	08007401 	.word	0x08007401
 80073f4:	08007401 	.word	0x08007401
 80073f8:	08007475 	.word	0x08007475
 80073fc:	08007489 	.word	0x08007489
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	b2da      	uxtb	r2, r3
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	18d1      	adds	r1, r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007420:	f7ff ff5c 	bl	80072dc <prvInsertTimerInActiveList>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d069      	beq.n	80074fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007430:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d05e      	beq.n	80074fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	441a      	add	r2, r3
 8007448:	2300      	movs	r3, #0
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	2300      	movs	r3, #0
 800744e:	2100      	movs	r1, #0
 8007450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007452:	f7ff fe05 	bl	8007060 <xTimerGenericCommand>
 8007456:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d14f      	bne.n	80074fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	61bb      	str	r3, [r7, #24]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	b2da      	uxtb	r2, r3
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007486:	e03a      	b.n	80074fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	b2da      	uxtb	r2, r3
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	617b      	str	r3, [r7, #20]
}
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	18d1      	adds	r1, r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074cc:	f7ff ff06 	bl	80072dc <prvInsertTimerInActiveList>
					break;
 80074d0:	e015      	b.n	80074fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d103      	bne.n	80074e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80074e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e2:	f000 fb11 	bl	8007b08 <vPortFree>
 80074e6:	e00a      	b.n	80074fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074ee:	f023 0301 	bic.w	r3, r3, #1
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074fa:	e000      	b.n	80074fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80074fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <prvProcessReceivedCommands+0x1c0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	1d39      	adds	r1, r7, #4
 8007504:	2200      	movs	r2, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fc90 	bl	8005e2c <xQueueReceive>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f47f af2a 	bne.w	8007368 <prvProcessReceivedCommands+0x8>
	}
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	3730      	adds	r7, #48	; 0x30
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000dfc 	.word	0x20000dfc

08007524 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800752a:	e048      	b.n	80075be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800752c:	4b2d      	ldr	r3, [pc, #180]	; (80075e4 <prvSwitchTimerLists+0xc0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007536:	4b2b      	ldr	r3, [pc, #172]	; (80075e4 <prvSwitchTimerLists+0xc0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3304      	adds	r3, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe f9a9 	bl	800589c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d02e      	beq.n	80075be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4413      	add	r3, r2
 8007568:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	429a      	cmp	r2, r3
 8007570:	d90e      	bls.n	8007590 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800757e:	4b19      	ldr	r3, [pc, #100]	; (80075e4 <prvSwitchTimerLists+0xc0>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f7fe f94e 	bl	800582a <vListInsert>
 800758e:	e016      	b.n	80075be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007590:	2300      	movs	r3, #0
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	2100      	movs	r1, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fd60 	bl	8007060 <xTimerGenericCommand>
 80075a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	603b      	str	r3, [r7, #0]
}
 80075ba:	bf00      	nop
 80075bc:	e7fe      	b.n	80075bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <prvSwitchTimerLists+0xc0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1b1      	bne.n	800752c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <prvSwitchTimerLists+0xc0>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075ce:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <prvSwitchTimerLists+0xc4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a04      	ldr	r2, [pc, #16]	; (80075e4 <prvSwitchTimerLists+0xc0>)
 80075d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075d6:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <prvSwitchTimerLists+0xc4>)
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	6013      	str	r3, [r2, #0]
}
 80075dc:	bf00      	nop
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	20000df4 	.word	0x20000df4
 80075e8:	20000df8 	.word	0x20000df8

080075ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075f2:	f000 f967 	bl	80078c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075f6:	4b15      	ldr	r3, [pc, #84]	; (800764c <prvCheckForValidListAndQueue+0x60>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d120      	bne.n	8007640 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075fe:	4814      	ldr	r0, [pc, #80]	; (8007650 <prvCheckForValidListAndQueue+0x64>)
 8007600:	f7fe f8c2 	bl	8005788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007604:	4813      	ldr	r0, [pc, #76]	; (8007654 <prvCheckForValidListAndQueue+0x68>)
 8007606:	f7fe f8bf 	bl	8005788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800760a:	4b13      	ldr	r3, [pc, #76]	; (8007658 <prvCheckForValidListAndQueue+0x6c>)
 800760c:	4a10      	ldr	r2, [pc, #64]	; (8007650 <prvCheckForValidListAndQueue+0x64>)
 800760e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <prvCheckForValidListAndQueue+0x70>)
 8007612:	4a10      	ldr	r2, [pc, #64]	; (8007654 <prvCheckForValidListAndQueue+0x68>)
 8007614:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007616:	2300      	movs	r3, #0
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	4b11      	ldr	r3, [pc, #68]	; (8007660 <prvCheckForValidListAndQueue+0x74>)
 800761c:	4a11      	ldr	r2, [pc, #68]	; (8007664 <prvCheckForValidListAndQueue+0x78>)
 800761e:	2110      	movs	r1, #16
 8007620:	200a      	movs	r0, #10
 8007622:	f7fe f9cd 	bl	80059c0 <xQueueGenericCreateStatic>
 8007626:	4603      	mov	r3, r0
 8007628:	4a08      	ldr	r2, [pc, #32]	; (800764c <prvCheckForValidListAndQueue+0x60>)
 800762a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800762c:	4b07      	ldr	r3, [pc, #28]	; (800764c <prvCheckForValidListAndQueue+0x60>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <prvCheckForValidListAndQueue+0x60>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	490b      	ldr	r1, [pc, #44]	; (8007668 <prvCheckForValidListAndQueue+0x7c>)
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fde6 	bl	800620c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007640:	f000 f970 	bl	8007924 <vPortExitCritical>
}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	20000dfc 	.word	0x20000dfc
 8007650:	20000dcc 	.word	0x20000dcc
 8007654:	20000de0 	.word	0x20000de0
 8007658:	20000df4 	.word	0x20000df4
 800765c:	20000df8 	.word	0x20000df8
 8007660:	20000ea8 	.word	0x20000ea8
 8007664:	20000e08 	.word	0x20000e08
 8007668:	08007d1c 	.word	0x08007d1c

0800766c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3b04      	subs	r3, #4
 800767c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3b04      	subs	r3, #4
 800768a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f023 0201 	bic.w	r2, r3, #1
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3b04      	subs	r3, #4
 800769a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800769c:	4a0c      	ldr	r2, [pc, #48]	; (80076d0 <pxPortInitialiseStack+0x64>)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	3b14      	subs	r3, #20
 80076a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3b04      	subs	r3, #4
 80076b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f06f 0202 	mvn.w	r2, #2
 80076ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3b20      	subs	r3, #32
 80076c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076c2:	68fb      	ldr	r3, [r7, #12]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	080076d5 	.word	0x080076d5

080076d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076de:	4b12      	ldr	r3, [pc, #72]	; (8007728 <prvTaskExitError+0x54>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e6:	d00a      	beq.n	80076fe <prvTaskExitError+0x2a>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	60fb      	str	r3, [r7, #12]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <prvTaskExitError+0x28>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60bb      	str	r3, [r7, #8]
}
 8007710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007712:	bf00      	nop
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0fc      	beq.n	8007714 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800771a:	bf00      	nop
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	2000000c 	.word	0x2000000c
 800772c:	00000000 	.word	0x00000000

08007730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <pxCurrentTCBConst2>)
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	6808      	ldr	r0, [r1, #0]
 8007736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773a:	f380 8809 	msr	PSP, r0
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f04f 0000 	mov.w	r0, #0
 8007746:	f380 8811 	msr	BASEPRI, r0
 800774a:	4770      	bx	lr
 800774c:	f3af 8000 	nop.w

08007750 <pxCurrentTCBConst2>:
 8007750:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007758:	4808      	ldr	r0, [pc, #32]	; (800777c <prvPortStartFirstTask+0x24>)
 800775a:	6800      	ldr	r0, [r0, #0]
 800775c:	6800      	ldr	r0, [r0, #0]
 800775e:	f380 8808 	msr	MSP, r0
 8007762:	f04f 0000 	mov.w	r0, #0
 8007766:	f380 8814 	msr	CONTROL, r0
 800776a:	b662      	cpsie	i
 800776c:	b661      	cpsie	f
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	df00      	svc	0
 8007778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800777a:	bf00      	nop
 800777c:	e000ed08 	.word	0xe000ed08

08007780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007786:	4b46      	ldr	r3, [pc, #280]	; (80078a0 <xPortStartScheduler+0x120>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a46      	ldr	r2, [pc, #280]	; (80078a4 <xPortStartScheduler+0x124>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d10a      	bne.n	80077a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	613b      	str	r3, [r7, #16]
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80077a6:	4b3e      	ldr	r3, [pc, #248]	; (80078a0 <xPortStartScheduler+0x120>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a3f      	ldr	r2, [pc, #252]	; (80078a8 <xPortStartScheduler+0x128>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d10a      	bne.n	80077c6 <xPortStartScheduler+0x46>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <xPortStartScheduler+0x12c>)
 80077c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	22ff      	movs	r2, #255	; 0xff
 80077d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	4b31      	ldr	r3, [pc, #196]	; (80078b0 <xPortStartScheduler+0x130>)
 80077ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077ee:	4b31      	ldr	r3, [pc, #196]	; (80078b4 <xPortStartScheduler+0x134>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077f4:	e009      	b.n	800780a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077f6:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <xPortStartScheduler+0x134>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4a2d      	ldr	r2, [pc, #180]	; (80078b4 <xPortStartScheduler+0x134>)
 80077fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007812:	2b80      	cmp	r3, #128	; 0x80
 8007814:	d0ef      	beq.n	80077f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007816:	4b27      	ldr	r3, [pc, #156]	; (80078b4 <xPortStartScheduler+0x134>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1c3 0307 	rsb	r3, r3, #7
 800781e:	2b04      	cmp	r3, #4
 8007820:	d00a      	beq.n	8007838 <xPortStartScheduler+0xb8>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	60bb      	str	r3, [r7, #8]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007838:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <xPortStartScheduler+0x134>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <xPortStartScheduler+0x134>)
 8007840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <xPortStartScheduler+0x134>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800784a:	4a1a      	ldr	r2, [pc, #104]	; (80078b4 <xPortStartScheduler+0x134>)
 800784c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	b2da      	uxtb	r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007856:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <xPortStartScheduler+0x138>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a17      	ldr	r2, [pc, #92]	; (80078b8 <xPortStartScheduler+0x138>)
 800785c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007862:	4b15      	ldr	r3, [pc, #84]	; (80078b8 <xPortStartScheduler+0x138>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a14      	ldr	r2, [pc, #80]	; (80078b8 <xPortStartScheduler+0x138>)
 8007868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800786c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800786e:	f000 f8dd 	bl	8007a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007872:	4b12      	ldr	r3, [pc, #72]	; (80078bc <xPortStartScheduler+0x13c>)
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007878:	f000 f8fc 	bl	8007a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800787c:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <xPortStartScheduler+0x140>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a0f      	ldr	r2, [pc, #60]	; (80078c0 <xPortStartScheduler+0x140>)
 8007882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007888:	f7ff ff66 	bl	8007758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800788c:	f7ff f854 	bl	8006938 <vTaskSwitchContext>
	prvTaskExitError();
 8007890:	f7ff ff20 	bl	80076d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	e000ed00 	.word	0xe000ed00
 80078a4:	410fc271 	.word	0x410fc271
 80078a8:	410fc270 	.word	0x410fc270
 80078ac:	e000e400 	.word	0xe000e400
 80078b0:	20000ef8 	.word	0x20000ef8
 80078b4:	20000efc 	.word	0x20000efc
 80078b8:	e000ed20 	.word	0xe000ed20
 80078bc:	2000000c 	.word	0x2000000c
 80078c0:	e000ef34 	.word	0xe000ef34

080078c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	607b      	str	r3, [r7, #4]
}
 80078dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078de:	4b0f      	ldr	r3, [pc, #60]	; (800791c <vPortEnterCritical+0x58>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3301      	adds	r3, #1
 80078e4:	4a0d      	ldr	r2, [pc, #52]	; (800791c <vPortEnterCritical+0x58>)
 80078e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <vPortEnterCritical+0x58>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d10f      	bne.n	8007910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <vPortEnterCritical+0x5c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <vPortEnterCritical+0x4c>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	603b      	str	r3, [r7, #0]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <vPortEnterCritical+0x4a>
	}
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	2000000c 	.word	0x2000000c
 8007920:	e000ed04 	.word	0xe000ed04

08007924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800792a:	4b12      	ldr	r3, [pc, #72]	; (8007974 <vPortExitCritical+0x50>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <vPortExitCritical+0x24>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	607b      	str	r3, [r7, #4]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <vPortExitCritical+0x50>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3b01      	subs	r3, #1
 800794e:	4a09      	ldr	r2, [pc, #36]	; (8007974 <vPortExitCritical+0x50>)
 8007950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007952:	4b08      	ldr	r3, [pc, #32]	; (8007974 <vPortExitCritical+0x50>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <vPortExitCritical+0x42>
 800795a:	2300      	movs	r3, #0
 800795c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f383 8811 	msr	BASEPRI, r3
}
 8007964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	2000000c 	.word	0x2000000c
	...

08007980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007980:	f3ef 8009 	mrs	r0, PSP
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <pxCurrentTCBConst>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f01e 0f10 	tst.w	lr, #16
 8007990:	bf08      	it	eq
 8007992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	6010      	str	r0, [r2, #0]
 800799c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80079a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079a4:	f380 8811 	msr	BASEPRI, r0
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f7fe ffc2 	bl	8006938 <vTaskSwitchContext>
 80079b4:	f04f 0000 	mov.w	r0, #0
 80079b8:	f380 8811 	msr	BASEPRI, r0
 80079bc:	bc09      	pop	{r0, r3}
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	6808      	ldr	r0, [r1, #0]
 80079c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c6:	f01e 0f10 	tst.w	lr, #16
 80079ca:	bf08      	it	eq
 80079cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079d0:	f380 8809 	msr	PSP, r0
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w

080079e0 <pxCurrentTCBConst>:
 80079e0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop

080079e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a02:	f7fe fedf 	bl	80067c4 <xTaskIncrementTick>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <xPortSysTickHandler+0x40>)
 8007a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	f383 8811 	msr	BASEPRI, r3
}
 8007a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a20:	bf00      	nop
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a30:	4b0b      	ldr	r3, [pc, #44]	; (8007a60 <vPortSetupTimerInterrupt+0x34>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <vPortSetupTimerInterrupt+0x38>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <vPortSetupTimerInterrupt+0x3c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <vPortSetupTimerInterrupt+0x40>)
 8007a42:	fba2 2303 	umull	r2, r3, r2, r3
 8007a46:	099b      	lsrs	r3, r3, #6
 8007a48:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <vPortSetupTimerInterrupt+0x44>)
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a4e:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <vPortSetupTimerInterrupt+0x34>)
 8007a50:	2207      	movs	r2, #7
 8007a52:	601a      	str	r2, [r3, #0]
}
 8007a54:	bf00      	nop
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	e000e010 	.word	0xe000e010
 8007a64:	e000e018 	.word	0xe000e018
 8007a68:	20000000 	.word	0x20000000
 8007a6c:	10624dd3 	.word	0x10624dd3
 8007a70:	e000e014 	.word	0xe000e014

08007a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a84 <vPortEnableVFP+0x10>
 8007a78:	6801      	ldr	r1, [r0, #0]
 8007a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a7e:	6001      	str	r1, [r0, #0]
 8007a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a82:	bf00      	nop
 8007a84:	e000ed88 	.word	0xe000ed88

08007a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a8e:	f3ef 8305 	mrs	r3, IPSR
 8007a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b0f      	cmp	r3, #15
 8007a98:	d914      	bls.n	8007ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a9a:	4a17      	ldr	r2, [pc, #92]	; (8007af8 <vPortValidateInterruptPriority+0x70>)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007aa4:	4b15      	ldr	r3, [pc, #84]	; (8007afc <vPortValidateInterruptPriority+0x74>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	7afa      	ldrb	r2, [r7, #11]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d20a      	bcs.n	8007ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	607b      	str	r3, [r7, #4]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <vPortValidateInterruptPriority+0x78>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007acc:	4b0d      	ldr	r3, [pc, #52]	; (8007b04 <vPortValidateInterruptPriority+0x7c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d90a      	bls.n	8007aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	603b      	str	r3, [r7, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <vPortValidateInterruptPriority+0x60>
	}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000e3f0 	.word	0xe000e3f0
 8007afc:	20000ef8 	.word	0x20000ef8
 8007b00:	e000ed0c 	.word	0xe000ed0c
 8007b04:	20000efc 	.word	0x20000efc

08007b08 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d04d      	beq.n	8007bb6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b1a:	2308      	movs	r3, #8
 8007b1c:	425b      	negs	r3, r3
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4413      	add	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4b24      	ldr	r3, [pc, #144]	; (8007bc0 <vPortFree+0xb8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <vPortFree+0x44>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60fb      	str	r3, [r7, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	e7fe      	b.n	8007b4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00a      	beq.n	8007b6a <vPortFree+0x62>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60bb      	str	r3, [r7, #8]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	4b14      	ldr	r3, [pc, #80]	; (8007bc0 <vPortFree+0xb8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01e      	beq.n	8007bb6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d11a      	bne.n	8007bb6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <vPortFree+0xb8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	43db      	mvns	r3, r3
 8007b8a:	401a      	ands	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b90:	f7fe fd5c 	bl	800664c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <vPortFree+0xbc>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	4a09      	ldr	r2, [pc, #36]	; (8007bc4 <vPortFree+0xbc>)
 8007ba0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ba2:	6938      	ldr	r0, [r7, #16]
 8007ba4:	f000 f812 	bl	8007bcc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ba8:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <vPortFree+0xc0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3301      	adds	r3, #1
 8007bae:	4a06      	ldr	r2, [pc, #24]	; (8007bc8 <vPortFree+0xc0>)
 8007bb0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bb2:	f7fe fd59 	bl	8006668 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20000f14 	.word	0x20000f14
 8007bc4:	20000f0c 	.word	0x20000f0c
 8007bc8:	20000f10 	.word	0x20000f10

08007bcc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bd4:	4b28      	ldr	r3, [pc, #160]	; (8007c78 <prvInsertBlockIntoFreeList+0xac>)
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e002      	b.n	8007be0 <prvInsertBlockIntoFreeList+0x14>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d8f7      	bhi.n	8007bda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d108      	bne.n	8007c0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	441a      	add	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d118      	bne.n	8007c54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <prvInsertBlockIntoFreeList+0xb0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d00d      	beq.n	8007c4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	441a      	add	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e008      	b.n	8007c5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <prvInsertBlockIntoFreeList+0xb0>)
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e003      	b.n	8007c5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d002      	beq.n	8007c6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000f00 	.word	0x20000f00
 8007c7c:	20000f08 	.word	0x20000f08

08007c80 <__libc_init_array>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	4d0d      	ldr	r5, [pc, #52]	; (8007cb8 <__libc_init_array+0x38>)
 8007c84:	4c0d      	ldr	r4, [pc, #52]	; (8007cbc <__libc_init_array+0x3c>)
 8007c86:	1b64      	subs	r4, r4, r5
 8007c88:	10a4      	asrs	r4, r4, #2
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	42a6      	cmp	r6, r4
 8007c8e:	d109      	bne.n	8007ca4 <__libc_init_array+0x24>
 8007c90:	4d0b      	ldr	r5, [pc, #44]	; (8007cc0 <__libc_init_array+0x40>)
 8007c92:	4c0c      	ldr	r4, [pc, #48]	; (8007cc4 <__libc_init_array+0x44>)
 8007c94:	f000 f82e 	bl	8007cf4 <_init>
 8007c98:	1b64      	subs	r4, r4, r5
 8007c9a:	10a4      	asrs	r4, r4, #2
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	42a6      	cmp	r6, r4
 8007ca0:	d105      	bne.n	8007cae <__libc_init_array+0x2e>
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca8:	4798      	blx	r3
 8007caa:	3601      	adds	r6, #1
 8007cac:	e7ee      	b.n	8007c8c <__libc_init_array+0xc>
 8007cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb2:	4798      	blx	r3
 8007cb4:	3601      	adds	r6, #1
 8007cb6:	e7f2      	b.n	8007c9e <__libc_init_array+0x1e>
 8007cb8:	08007d4c 	.word	0x08007d4c
 8007cbc:	08007d4c 	.word	0x08007d4c
 8007cc0:	08007d4c 	.word	0x08007d4c
 8007cc4:	08007d50 	.word	0x08007d50

08007cc8 <memcpy>:
 8007cc8:	440a      	add	r2, r1
 8007cca:	4291      	cmp	r1, r2
 8007ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cd0:	d100      	bne.n	8007cd4 <memcpy+0xc>
 8007cd2:	4770      	bx	lr
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cde:	4291      	cmp	r1, r2
 8007ce0:	d1f9      	bne.n	8007cd6 <memcpy+0xe>
 8007ce2:	bd10      	pop	{r4, pc}

08007ce4 <memset>:
 8007ce4:	4402      	add	r2, r0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d100      	bne.n	8007cee <memset+0xa>
 8007cec:	4770      	bx	lr
 8007cee:	f803 1b01 	strb.w	r1, [r3], #1
 8007cf2:	e7f9      	b.n	8007ce8 <memset+0x4>

08007cf4 <_init>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	bf00      	nop
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr

08007d00 <_fini>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr
